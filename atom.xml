<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Billy Messenger</title>
    <subtitle>The blogs I&#x27;ve written while developing audio software</subtitle>
    <link rel="self" type="application/atom+xml" href="https://billydm.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://billydm.github.io/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-12-01T00:00:00+00:00</updated>
    <id>https://billydm.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>VitaliumVerb 1.2.0</title>
        <published>2024-12-01T00:00:00+00:00</published>
        <updated>2024-12-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/vitaliumverb-update/"/>
        <id>https://billydm.github.io/blog/vitaliumverb-update/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/vitaliumverb-update/">&lt;hr &#x2F;&gt;
&lt;p&gt;It&#x27;s been a while since I posted anything. I should get better at staying on top of that.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve of course been working on my main projects (and I will maybe post an update on those soon), but I figured I would announce a small update I made to my reverb plugin port &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;vitalium-verb&quot;&gt;VitaliumVerb&lt;&#x2F;a&gt; I talked about in my previous blogpost &lt;a href=&quot;..&#x2F;porting-a-reverb&quot;&gt;Porting a Reverb&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;it-has-a-gui-rocket&quot;&gt;It Has a GUI! ðŸš€&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I went ahead and made a quick n&#x27; dirty (but still visually pleasing) GUI in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vizia&#x2F;vizia&quot;&gt;Vizia&lt;&#x2F;a&gt; GUI framework!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;vitaliumverb-update&#x2F;VitaliumVerb-screenshot.png&quot; alt=&quot;VitaliumVerb screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pre-built binaries for Linux, Mac, and Windows can be downloaded from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;vitalium-verb&#x2F;releases&quot;&gt;Releases&lt;&#x2F;a&gt; tab in the GitHub repository!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So why did I choose Vizia and not my own GUI framework that I&#x27;ve been working on? Well for one, my GUI framework is not finished yet ðŸ˜…, and two, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbert-vdh&#x2F;nih-plug&quot;&gt;nih-plug&lt;&#x2F;a&gt; has a ready-made, easy-to-use slider widget for Vizia.&lt;&#x2F;p&gt;
&lt;p&gt;While I would prefer knobs and an eq widget like the original Vital synth had, this will do for now. Maybe at some point I will create a fancier GUI in my own GUI framework.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;other-changes&quot;&gt;Other Changes&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Another small (but breaking) change I made is that the stereo width parameter now ranges from &lt;code&gt;0.0%&lt;&#x2F;code&gt; to &lt;code&gt;200.0%&lt;&#x2F;code&gt; instead of &lt;code&gt;-100%&lt;&#x2F;code&gt; to &lt;code&gt;100%&lt;&#x2F;code&gt; like a stereo width parameter should. This should make it clearer what the parameter does.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;addendum&quot;&gt;Addendum&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Someone was asking what the &quot;minor improvements and optimizations added&quot; were as mentioned in the readme, and I realized I forgot to summarize this in my previous blogpost.&lt;&#x2F;p&gt;
&lt;p&gt;Essentially it&#x27;s just these three things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A stereo width parameter was added to the wet signal.&lt;&#x2F;li&gt;
&lt;li&gt;Parameter curves were tweaked to focus better on the sweet spots (and because I wanted to use nih-plug&#x27;s built-in parameter curves as much as possible).&lt;&#x2F;li&gt;
&lt;li&gt;Runtime-evaluated constants like filter coefficients, gain amplitudes, chorus phase increments, and allpass matrices are only recalculated when their respective parameters have been changed (the original recalculated these every process cycle).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Porting a Reverb</title>
        <published>2024-05-02T00:00:00+00:00</published>
        <updated>2024-05-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/porting-a-reverb/"/>
        <id>https://billydm.github.io/blog/porting-a-reverb/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/porting-a-reverb/">&lt;hr &#x2F;&gt;
&lt;p&gt;I know I should be working on finishing the GUI library, but for the past couple weeks I&#x27;ve been a bit obsessed over a side project ðŸ˜….&lt;&#x2F;p&gt;
&lt;p&gt;I quite like the sound of the reverb module from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mtytel&#x2F;vital&quot;&gt;Vital&lt;&#x2F;a&gt; synth, and I&#x27;ve been wanting to port it to a standalone effect plugin. I&#x27;d also like to potentially add it as one of the selectable algorithms in Meadowlark&#x27;s future built-in reverb plugin.&lt;&#x2F;p&gt;
&lt;p&gt;Of course being a ðŸ¦€-y guy, I wanted to try porting it to idiomatic Rust. Vital&#x27;s codebase is fairly complicated since it uses lots of SIMD intrinsics and some raw pointers, but I was up to the challenge. (Although it ended up being a lot tougher than I thought.)&lt;&#x2F;p&gt;
&lt;p&gt;You can get the finished reverb plugin and view the code at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;vitalium-verb&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;vitalium-verb&lt;&#x2F;a&gt;. (Note there is no GUI for it yet at the time of this writing, I figured I should get back to working on Meadowlark instead of spending another week or so on a GUI.)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;parsing-vital-s-code&quot;&gt;Parsing Vital&#x27;s Code&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#x27;m going to link to the fully open source fork of Vital called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;tree&#x2F;master&#x2F;ports-juce6.0&#x2F;vitalium&quot;&gt;Vitalium&lt;&#x2F;a&gt; since that&#x27;s what I referenced when porting the code. It probably doesn&#x27;t matter, but I just wanted to be extra sure I was only copying GPLv3 code.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Edit:
Someone has pointed out that Vitalium&#x27;s reverb design seems to be similar to the design from &lt;a href=&quot;https:&#x2F;&#x2F;ccrma.stanford.edu&#x2F;~dattorro&#x2F;EffectDesignPart1.pdf&quot;&gt;this famous paper&lt;&#x2F;a&gt; by Jon Dattorro, for those interested.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The main bulk of the reverb DSP code is in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;blob&#x2F;31afd943cfa93da7f0193b6db7ba275ff810e5a8&#x2F;ports-juce6.0&#x2F;vitalium&#x2F;source&#x2F;synthesis&#x2F;effects&#x2F;reverb.h&quot;&gt;reverb.h&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;blob&#x2F;31afd943cfa93da7f0193b6db7ba275ff810e5a8&#x2F;ports-juce6.0&#x2F;vitalium&#x2F;source&#x2F;synthesis&#x2F;effects&#x2F;reverb.cpp&quot;&gt;reverb.cpp&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The codebase contains its own cross-platform SIMD abstractions located in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;blob&#x2F;31afd943cfa93da7f0193b6db7ba275ff810e5a8&#x2F;ports-juce6.0&#x2F;vitalium&#x2F;source&#x2F;synthesis&#x2F;framework&#x2F;poly_values.h&quot;&gt;poly_values.h&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;blob&#x2F;31afd943cfa93da7f0193b6db7ba275ff810e5a8&#x2F;ports-juce6.0&#x2F;vitalium&#x2F;source&#x2F;synthesis&#x2F;framework&#x2F;poly_utils.h#L119&quot;&gt;poly_utils.h&lt;&#x2F;a&gt;, along with some algorithms for common mathematical operations located in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;blob&#x2F;31afd943cfa93da7f0193b6db7ba275ff810e5a8&#x2F;ports-juce6.0&#x2F;vitalium&#x2F;source&#x2F;synthesis&#x2F;framework&#x2F;futils.h&quot;&gt;futils.h&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;From what I can gather with my novice-level understanding of DSP (sorry if I get some of the terminology wrong here), the reverb is composed of the following parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Wet&#x2F;dry mix amount. It uses an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;blob&#x2F;31afd943cfa93da7f0193b6db7ba275ff810e5a8&#x2F;ports-juce6.0&#x2F;vitalium&#x2F;source&#x2F;synthesis&#x2F;framework&#x2F;futils.h#L346&quot;&gt;equal power fade&lt;&#x2F;a&gt; function to turn that into amplitudes for the wet and dry signals.&lt;&#x2F;li&gt;
&lt;li&gt;Four simple one-pole filters. Two are used to apply low-pass&#x2F;high-pass to the dry signal before it is sent to the reverb tank. The other two are the low-shelf&#x2F;high-shelf filters that dampen the feedback signal in the reverb tank. The code for the filter design is located in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;blob&#x2F;31afd943cfa93da7f0193b6db7ba275ff810e5a8&#x2F;ports-juce6.0&#x2F;vitalium&#x2F;source&#x2F;synthesis&#x2F;filters&#x2F;one_pole_filter.h&quot;&gt;one-pole-filter.h&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;A chorus effect that is applied to the feedback signal in the reverb tank. Luckily for me it doesn&#x27;t use the DSP from the chorus module, instead it seems to use a much simpler chorusing algorithm that is implemented inline.&lt;&#x2F;li&gt;
&lt;li&gt;Three (I think) stages of allpass filters that are applied to the feedback signal in the reverb tank. Each allpass stage is implemented as a 4x4 matrix (I think).
The first two stages are feedback filters (I think) and the last stage is a feed-forward filter (I think). &lt;em&gt;(I don&#x27;t know how reverbs work tbh, I just know that allpass filters are involved somehow)&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;A ring buffer used to delay the wet output. It contains a Catmull sub-sample interpolator implemented as a 4x4 matrix. The ring buffer and its interpolation algorithm are defined in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;blob&#x2F;31afd943cfa93da7f0193b6db7ba275ff810e5a8&#x2F;ports-juce6.0&#x2F;vitalium&#x2F;source&#x2F;synthesis&#x2F;lookups&#x2F;memory.h#L136&quot;&gt;memory.h&lt;&#x2F;a&gt;, the the code to construct the Catmull matrix and the value matrix live here in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;blob&#x2F;31afd943cfa93da7f0193b6db7ba275ff810e5a8&#x2F;ports-juce6.0&#x2F;vitalium&#x2F;source&#x2F;synthesis&#x2F;framework&#x2F;poly_utils.h#L138&quot;&gt;poly_utils.h&lt;&#x2F;a&gt;, and the matrix struct itself lives in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;blob&#x2F;31afd943cfa93da7f0193b6db7ba275ff810e5a8&#x2F;ports-juce6.0&#x2F;vitalium&#x2F;source&#x2F;synthesis&#x2F;framework&#x2F;matrix.h&quot;&gt;matrix.h&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Multiple ring buffers used to hold the feedback memory. A polynomial sub-sample interpolator is used to read from this memory. Like the delay ring buffer&#x27;s interpolator, this interpolator is implemented as a 4x4 matrix, with the code to construct this matrix here in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;blob&#x2F;31afd943cfa93da7f0193b6db7ba275ff810e5a8&#x2F;ports-juce6.0&#x2F;vitalium&#x2F;source&#x2F;synthesis&#x2F;framework&#x2F;poly_utils.h#L119&quot;&gt;polyutils.h&lt;&#x2F;a&gt;, and the matrix struct itself being the same as above.&lt;&#x2F;li&gt;
&lt;li&gt;And finally, multiple ring buffers used to hold the state of the allpass filters. The reverb does not use sub-sample interpolation to read from these.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Special notes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All parameters are linearly smoothed by calculating a delta amount and adding that delta to the parameter every frame.&lt;&#x2F;li&gt;
&lt;li&gt;All ring buffers have a size equal to a power of 2. This allows indices to be cheaply constrained to a valid range by bitwise and-ing them with a mask.&lt;&#x2F;li&gt;
&lt;li&gt;The pointers to the feedback and delay memory ring buffers are offset by 1. This is needed because the sub-sample interpolators read one sample in the past, which would cause an out-of-bounds read if there wasn&#x27;t that offset.&lt;&#x2F;li&gt;
&lt;li&gt;At the top of each call to process, the last 4 samples in each feedback memory ring buffer are wrapped to the front of the buffer. I&#x27;m not sure exactly why this is done, but I think it has something to do with how the sub-sample interpolator works.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;initial-attempt&quot;&gt;Initial Attempt&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I used the great &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbert-vdh&#x2F;nih-plug&quot;&gt;nih-plug&lt;&#x2F;a&gt; framework for my plugin.&lt;&#x2F;p&gt;
&lt;p&gt;I started out with making my own simple SIMD abstractions similar to how Vital does it, instead of using the nightly-only &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;portable-simd&quot;&gt;portable-simd&lt;&#x2F;a&gt; library. I wanted to follow Vital&#x27;s code as closely as possible. (Although I later regretted this decision and switched to using &lt;code&gt;portable-simd&lt;&#x2F;code&gt; as you will see later on).&lt;&#x2F;p&gt;
&lt;p&gt;I then added the simple stuff like the wet&#x2F;dry gain and the lowpass&#x2F;highpass filters that are applied to the dry signal before it is sent to the reverb tank. I also decided to go with separate wet&#x2F;dry parameters instead of a single &quot;mix&quot; parameter like the original C++ code had. I encountered a small bug with the gain dipping right before 0 decibels (I put a parenthesis in the wrong place), but other than that it was smooth sailing and I quickly got it working.&lt;&#x2F;p&gt;
&lt;p&gt;After that, I wasn&#x27;t really sure how to break down the algorithm any further since I don&#x27;t really understand how reverbs work that well. So I just went for a hail mary and implemented all the rest of the reverb. Now compile it, load it into a DAW, &lt;em&gt;and&lt;&#x2F;em&gt;...&lt;&#x2F;p&gt;
&lt;p&gt;Nothing except a constant DC offset on the output. Oh boy, where do I start debugging this?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;debugging-adventure&quot;&gt;Debugging Adventure&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Since I don&#x27;t have any equations to reference from, I decided to isolate all the relevant C++ code into a small test project where I could run a sine wav through it and record the values at every single step in the process. I did the same in Rust and compared them to see where things went wrong.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes I could have used a debugger to step through it instead of printing every variable to the terminal, but I&#x27;m lazy and didn&#x27;t feel like learning how to get the C++ debugger working with Linux and &lt;a href=&quot;https:&#x2F;&#x2F;vscodium.com&#x2F;&quot;&gt;VSCodium&lt;&#x2F;a&gt;. Yes I&#x27;m sure it&#x27;s easy, but I&#x27;m just used to debugging this way. Plus I&#x27;d rather have a single long list of values to reference from to more easily see where things go wrong.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Oh boy were there a lot of problems.&lt;&#x2F;p&gt;
&lt;p&gt;The first things I caught were some parenthesis in the wrong place and some multiply asterisks that were supposed to be plus signs. There were also a few places where I got the member variables mixed up with local variables that had the same name but without an underscore at the end (ugh, I&#x27;m so thankful Rust makes you use &lt;code&gt;self.&lt;&#x2F;code&gt; to access member variables).&lt;&#x2F;p&gt;
&lt;p&gt;The next thing that took me forever to figure out what was wrong is in the calculation of the allpass offsets. Here you can see what the C code was generating and what my rust code was generating:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; c++ ----------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;allpass_offset1: [6395, 8012, 7009, 7466]
&lt;&#x2F;span&gt;&lt;span&gt;allpass_offset2: [6459, 7164, 6825, 7258]
&lt;&#x2F;span&gt;&lt;span&gt;allpass_offset3: [8155, 7660, 4537, 5690]
&lt;&#x2F;span&gt;&lt;span&gt;allpass_offset4: [6235, 6668, 7977, 5306]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Rust --------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;allpass_offsets = [
&lt;&#x2F;span&gt;&lt;span&gt;    [3, 8012, 1, 7466],
&lt;&#x2F;span&gt;&lt;span&gt;    [3, 7164, 1, 7258],
&lt;&#x2F;span&gt;&lt;span&gt;    [3, 7660, 1, 5690],
&lt;&#x2F;span&gt;&lt;span&gt;    [3, 6668, 1, 5306],
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Weird, some of the numbers are correct but some of them aren&#x27;t. I tried looking at every step in the process, trying to see where my code was wrong. Eventually I finally found the culprit. Apparently the &lt;code&gt;_mm_mul_epi32&lt;&#x2F;code&gt; intrinsic I was using to multiply i32 vectors is SSE4.1, not SSE2, and so it was causing funky behavior on my AMD CPU. I then looked at how Vital implements its multiply function for i32 vectors:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; force_inline simd_type vector_call &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;mul&lt;&#x2F;span&gt;&lt;span&gt;(simd_type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;one&lt;&#x2F;span&gt;&lt;span&gt;, simd_type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;two&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;#if&lt;&#x2F;span&gt;&lt;span&gt; VITAL_AVX2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_mm256_mul_epi32(one, two)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;#elif&lt;&#x2F;span&gt;&lt;span&gt; VITAL_SSE2
&lt;&#x2F;span&gt;&lt;span&gt;      simd_type mul0_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_mm_mul_epu32(one, two)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      simd_type mul1_3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_mm_mul_epu32(_mm_shuffle_epi32(one, _MM_SHUFFLE(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;                                       _mm_shuffle_epi32(two, _MM_SHUFFLE(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_mm_unpacklo_epi32(_mm_shuffle_epi32(mul0_2, _MM_SHUFFLE (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;                                _mm_shuffle_epi32(mul1_3, _MM_SHUFFLE (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;#elif&lt;&#x2F;span&gt;&lt;span&gt; VITAL_NEON
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vmulq_u32(one, two)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Apparently it&#x27;s kind of complicated to multiply i32 vectors in SSE2, but once I implemented this in my code I was finally getting the correct values for allpass_offsets.&lt;&#x2F;p&gt;
&lt;p&gt;After some more debugging I eventually got it to the point where I was getting the same values up to the first pass of the processing loop. I felt like I was finally on the home stretch, but when I loaded it into the DAW, nothing. There was no wet output, only the dry signal playing through.&lt;&#x2F;p&gt;
&lt;p&gt;I then discovered that I needed to look much further in the processing loop before the first non-zero value is read from the feedback and allpass memories. That makes sense, a reverb is essentially a bunch of echos that take time to be reflected back. I found that with the parameters I was using, the first frame in the C++ code where the allpass reads a non-zero is frame 1136, and the first frame where the feedback reads a non-zero is frame 2930.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at the output of the Rust code, it was indeed showing that it was always reading zeros even after these frames. I checked and double-checked the complex interpolation algorithms to see if there was a mistake. Then I thought to see if maybe it was the memory ring buffers themselves that were all zeros, and sure enough, they were.&lt;&#x2F;p&gt;
&lt;p&gt;This was strange because there didn&#x27;t seem to be anything wrong with the code for writing to these ring buffers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; in the PolyF32 struct
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;(always)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;store_into_slice&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;; 4]) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;_mm_storeu_ps&lt;&#x2F;span&gt;&lt;span&gt;(a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;as_mut_ptr&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; in the reverb code
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(scaled_input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; delay_input).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;store_into_slice&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; allpass_lookup[allpass_write_index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;allpass_write_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;try_into&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Eventually I figured out that using &lt;code&gt;.try_into().unwrap()&lt;&#x2F;code&gt; to turn a slice of variable length into a slice of constant length doesn&#x27;t actually work. What it actually does is clone the slice into a temporary array, which then just gets discarded after the function is over.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe there&#x27;s a way to idiomatically convert a slice of variable size to a slice of constant length, but at this point I figured it was probably better to just use the &lt;code&gt;portable-simd&lt;&#x2F;code&gt; library in Rust since it already has all these kinds of quirks figured out. As a bonus this will also automatically let this code work for other processor architectures as well.&lt;&#x2F;p&gt;
&lt;p&gt;After fixing a few bugs from refactoring it to use the &lt;code&gt;portable-simd&lt;&#x2F;code&gt; library, it was finally time to load it into a DAW to see what will happen, &lt;em&gt;and&lt;&#x2F;em&gt;...&lt;&#x2F;p&gt;
&lt;p&gt;SUCCESS! (mostly) With the chorusing effect on, the wet signal was very noisy. But with it off, the reverb seemed to be working fine.&lt;&#x2F;p&gt;
&lt;p&gt;So I spent a while longer figuring out where my chorus code went wrong, and I just couldn&#x27;t find it.&lt;&#x2F;p&gt;
&lt;p&gt;Then I finally figured it out, the code wasn&#x27;t wrong, Vital just has the chorus parameters on a logarithmic curve that is heavily weighted towards the smaller values. When I loaded up Vitalium and turned the chorus knobs all the way up, sure enough there was that same noisiness. So adding a similar curve to my parameters finally fixed it!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;improvements&quot;&gt;Improvements&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Now I need to tweak the parameter curves until they feel right. Although I couldn&#x27;t find a setting with nih-plug&#x27;s built-in curves that made the &quot;decay&quot; parameter feel right. The decay parameter goes from 0.1 seconds all the way up to a crazy 64 seconds for creating those ambient drone effects. I want the majority of the parameter to take up the typical range of 0.1 - 5 seconds, and then have the all the rest of the values take up a small portion of the parameter. So I ended up making my own custom &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;vitalium-verb&#x2F;blob&#x2F;1d3fe0d80939ecd3f308d2a3f0c20c3b57d322d3&#x2F;src&#x2F;lib.rs#L349&quot;&gt;piece-wise function mapping&lt;&#x2F;a&gt; for it.&lt;&#x2F;p&gt;
&lt;p&gt;I also decided to switch to using a single &quot;mix&quot; parameter like what Vital has instead of separate wet&#x2F;dry parameters. After trying both methods I like the single mix parameter better.&lt;&#x2F;p&gt;
&lt;p&gt;I also decided to add a stereo width parameter to the wet output since the &lt;a href=&quot;https:&#x2F;&#x2F;www.musicdsp.org&#x2F;en&#x2F;latest&#x2F;Effects&#x2F;256-stereo-width-control-obtained-via-transfromation-matrix.html?highlight=width&quot;&gt;algorithm&lt;&#x2F;a&gt; for this is pretty simple. I actually think the reverb sounds even better with the width parameter set to around -5%, so I&#x27;m really glad I did that!&lt;&#x2F;p&gt;
&lt;p&gt;I also made some optimizations. The original code calculated the values&#x2F;deltas for every parameter on every call to &lt;code&gt;process()&lt;&#x2F;code&gt;, so I added code to only recalculate values for parameters that have changed.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;After this experience, I think it could be worth looking into compiling complex C++ DSP into a static library that can be used by Meadowlark and its plugins, instead of going through the painstaking process of translating it all to Rust. I have some experience doing this before with my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;rtaudio-sys&quot;&gt;RtAudio bindings&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And if the DSP is written in C, I can even consider transpiling it using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;immunant&#x2F;c2rust&quot;&gt;C2Rust&lt;&#x2F;a&gt; so there isn&#x27;t anything special needed in the build system. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RamiHg&#x2F;rust-libsamplerate&quot;&gt;rust-libsamplerate&lt;&#x2F;a&gt; crate is a great example that uses this technique.&lt;&#x2F;p&gt;
&lt;p&gt;Still, for simpler DSP, especially ones that don&#x27;t use lots of SIMD intrinsics or 3rd party libraries, I&#x27;d still prefer to have those ported those to Rust.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>RootVG</title>
        <published>2024-04-06T00:00:00+00:00</published>
        <updated>2024-04-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/rootvg/"/>
        <id>https://billydm.github.io/blog/rootvg/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/rootvg/">&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;A big piece of the puzzle for the GUI library I&#x27;m creating is more or less complete! It&#x27;s a hardware-accelerated vector graphics rendering library for &lt;a href=&quot;https:&#x2F;&#x2F;wgpu.rs&#x2F;&quot;&gt;wgpu&lt;&#x2F;a&gt;, which I call &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;rootvg&quot;&gt;RootVG&lt;&#x2F;a&gt;. It can render quads, triangle meshes, images, text, and even custom primitives with custom pipelines, all using the amazing wgpu library.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;See the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;rootvg&#x2F;blob&#x2F;main&#x2F;examples&#x2F;demo.rs&quot;&gt;demo example&lt;&#x2F;a&gt; for a quick overview of how the API works.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;em&gt;The logo I made for RootVG :)&lt;&#x2F;em&gt;
&lt;img src=&quot;&#x2F;images&#x2F;rootvg&#x2F;rootvg-logo.svg&quot; alt=&quot;RootVG logo&quot; width=&quot;256px&quot; height=&quot;256px&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;why-create-rootvg&quot;&gt;Why create RootVG?&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;There are four reasons. One, I wanted to create a rendering engine that is specifically tailored towards GUI. I wanted something that is lightweight* and has very little overhead (both for the CPU and GPU). Unlike other vector graphic rendering libraries like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;inniyah&#x2F;nanovg&quot;&gt;NanoVG&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;femtovg&#x2F;femtovg&quot;&gt;FemtoVG&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;audulus&#x2F;vger-rs&quot;&gt;vger&lt;&#x2F;a&gt;, or &lt;a href=&quot;https:&#x2F;&#x2F;skia.org&#x2F;&quot;&gt;Skia&lt;&#x2F;a&gt; which have a streaming drawing API similar to that of the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3schools.com&#x2F;jsref&#x2F;api_canvas.asp&quot;&gt;HTML5 Canvas API&lt;&#x2F;a&gt;, users of RootVG construct reusable &quot;primitives&quot; that can be cheaply placed at any z index and inside of any scissoring rectangle in any order, and then be rendered using as few draw calls as possible. I&#x27;ll explain how this works later on below.&lt;&#x2F;p&gt;
&lt;p&gt;Two, I wanted first-class support for custom shaders, as those will be very useful for creating efficient visualizers such as waveform displays, oscilloscopes, and spectrometers. WGPU makes it surprisingly simple to mix multiple pipelines together into a single render pass.&lt;&#x2F;p&gt;
&lt;p&gt;Third, I wanted to avoid targeting only OpenGL. Apple has been trying to depreciate OpenGL in MacOS, and I&#x27;d like to stay ahead of the curve. Additionally, on my Linux system specifically, I find that wgpu-based applications seem to have lower latency than OpenGL-based ones. Less latency in a GUI is always a win in my book.&lt;&#x2F;p&gt;
&lt;p&gt;And fourth, I wanted to take a deep dive into graphics programming in wgpu. I find graphics programming fun, and I also wanted the experience for potential fun side projects in the future (like a simple Minecraft-ish clone from scratch that I&#x27;ve always wanted to create). Wgpu has been a joy to work with and learn about.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;While wgpu itself is relatively lightweight compared to something like &lt;a href=&quot;https:&#x2F;&#x2F;skia.org&#x2F;&quot;&gt;Skia&lt;&#x2F;a&gt;, it&#x27;s still not quite as lightweight as I would have hoped. On release mode with LTO enabled and debug symbols stripped, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RazrFalcon&#x2F;cargo-bloat&quot;&gt;cargo-bloat&lt;&#x2F;a&gt; shows wgpu itself taking up about 6MB of the binary. Oh well, it&#x27;s good enough for now. I&#x27;d still rather use wgpu over interfacing with OpenGL, Vulkan, and Metal directly. Hopefully at some point wgpu gains the ability to omit including the shader compiler &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu&#x2F;tree&#x2F;trunk&#x2F;naga&quot;&gt;naga&lt;&#x2F;a&gt; into the binary and instead &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu&#x2F;issues&#x2F;3103&quot;&gt;load in precompiled shaders&lt;&#x2F;a&gt;. Using precompiled shaders should also improve startup times.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;the-primitive-types&quot;&gt;The Primitive Types&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;RootVG comes with six built-in primitive types:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solidquad-and-gradientquad&quot;&gt;SolidQuad and GradientQuad&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;rootvg&#x2F;quad-primitives.png&quot; alt=&quot;quad primitives&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve taken the quad primitives from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iced-rs&#x2F;iced&quot;&gt;Iced&lt;&#x2F;a&gt; GUI library and modified them to be more performant for my use case.&lt;&#x2F;p&gt;
&lt;p&gt;A &quot;quad&quot; is essentially a rectangle with optional rounded corners and an optional outline with a given thickness. Each of the four corners can have a different amount of rounding. A circle can be made if the corners have a large enough rounding.&lt;&#x2F;p&gt;
&lt;p&gt;The solid variant has a background filled with a solid color, and the gradient variant has a background filled with a linear gradient (I might add support for a radial gradient in the future).&lt;&#x2F;p&gt;
&lt;p&gt;Like Iced, the gradient variant uses the &lt;a href=&quot;https:&#x2F;&#x2F;bottosson.github.io&#x2F;posts&#x2F;oklab&#x2F;&quot;&gt;OkLab&lt;&#x2F;a&gt; color space. It looks &lt;em&gt;oh so&lt;&#x2F;em&gt; nice ðŸ‘Œ.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s no support for applying a gradient to the outline though. It would make things a lot more complicated and I personally don&#x27;t think it&#x27;s necessary.&lt;&#x2F;p&gt;
&lt;p&gt;Also like Iced, the solid variant has support for an optional drop-shadow. I might add drop-shadow support the the gradient variant as well if I find a need for it or if there&#x27;s demand for it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solidmesh-and-gradientmesh&quot;&gt;SolidMesh and GradientMesh&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;rootvg&#x2F;mesh-primitives.png&quot; alt=&quot;mesh primitives&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I also borrowed these from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iced-rs&#x2F;iced&quot;&gt;Iced&lt;&#x2F;a&gt; GUI library. Again I&#x27;ve modified them to be more performant for my use case.&lt;&#x2F;p&gt;
&lt;p&gt;These primitives simply render a collection of triangles. As the name suggests, the solid variant fills them with a solid color, and the gradient variant fills them with a linear gradient (again I might add support for radial gradients in the future). Like the &lt;code&gt;GradientQuad&lt;&#x2F;code&gt;, the &lt;code&gt;GradientMesh&lt;&#x2F;code&gt; also makes use of the &lt;a href=&quot;https:&#x2F;&#x2F;bottosson.github.io&#x2F;posts&#x2F;oklab&#x2F;&quot;&gt;OkLab&lt;&#x2F;a&gt; color space.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;therealmjp.github.io&#x2F;posts&#x2F;msaa-overview&#x2F;&quot;&gt;MSAA&lt;&#x2F;a&gt; anti-aliasing is used to smooth out meshes. Though unlike how Iced does it, in RootVG all primitives of all types are rendered in a single render pass. This can be a lot more efficient than constantly switching render passes for different types of primitives, especially on mobile hardware.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nical&#x2F;lyon&quot;&gt;Lyon&lt;&#x2F;a&gt; can be used to generate meshes using a streaming drawing API. This is the intended way to create more complex shapes such as arcs and bezier curves. I&#x27;ve also borrowed some of the helper drawing methods from Iced.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;text&quot;&gt;Text&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;rootvg&#x2F;text-primitive.png&quot; alt=&quot;text primitive&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Text primitives are rendered using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;grovesNL&#x2F;glyphon&quot;&gt;glyphon&lt;&#x2F;a&gt;. Not much to say about it, just that I&#x27;m thankful the work has already been done for me here.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Currently glyphon is not as optimized as it could be, especially for my use case. I might end up doing a soft-fork with RootVG-tailored optimizations.&lt;&#x2F;p&gt;
&lt;p&gt;The rendering quality is also not quite as sharp as I would like it. Hopefully this will improve once glyphon gets sub-pixel support.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;image&quot;&gt;Image&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;rootvg&#x2F;image-primitive.png&quot; alt=&quot;image primitive&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This primitive simply renders an srgba image. Image primitives can also be scaled and rotated.&lt;&#x2F;p&gt;
&lt;p&gt;RootVG also supports using the output of a previous render pass as the source of an image primitive, as shown in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;rootvg&#x2F;blob&#x2F;main&#x2F;examples&#x2F;prepass_texture.rs&quot;&gt;prepass_texture example&lt;&#x2F;a&gt;. This allows for tricks such as rendering an expensive waveform display to a texture using a wgpu shader, and then drawing that texture with a regular RootVG &lt;code&gt;ImagePrimitive&lt;&#x2F;code&gt; later. If the waveform is usually static, then this method is far more efficient than re-rendering the waveform in the shader every frame.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;custom-primitives&quot;&gt;Custom Primitives&lt;&#x2F;h2&gt;
&lt;p&gt;RootVG also supports custom primitives rendered using custom pipelines and shaders. This will be especially useful for creating efficient visualizers like spectrometers and oscilloscopes.&lt;&#x2F;p&gt;
&lt;p&gt;The API for this is a bit different than the API for built-in primitives. Take a look at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;rootvg&#x2F;blob&#x2F;main&#x2F;examples&#x2F;custom_primitive.rs&quot;&gt;custom_primitive example&lt;&#x2F;a&gt; for how this works.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike the built-in primitives, custom primitives aren&#x27;t batch optimized, meaning that each custom primitive instance will need its own draw command. Though in practice this shouldn&#x27;t be a problem since there is only going to be one or a handful of these custom primitives in a typical plugin&#x2F;app.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;how-primitives-are-stored&quot;&gt;How Primitives are Stored&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In order for RootVG to have low CPU overhead, primitives must be cheap to clone and upload to the GPU.&lt;&#x2F;p&gt;
&lt;p&gt;For quad primitives this is simple. They are stored in a packed format that can be directly copied to the GPU&#x27;s vertex buffer. For example the &lt;code&gt;SolidQuackPrimitive&lt;&#x2F;code&gt; is stored like this, which matches the struct in the shader one-to-one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Clone, Copy, Debug, PartialEq, bytemuck::Pod, bytemuck::Zeroable)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SolidQuadPrimitive &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;: PackedSrgb,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;; 2],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;; 2],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;border_color&lt;&#x2F;span&gt;&lt;span&gt;: PackedSrgb,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;border_radius&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;; 4],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;border_width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shadow_color&lt;&#x2F;span&gt;&lt;span&gt;: PackedSrgb,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shadow_offset&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;; 2],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shadow_blur_radius&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The other primitive types rely on some sort of heap-allocated data such as a &lt;code&gt;Vec&lt;&#x2F;code&gt; of vertices for meshes, a &lt;code&gt;Vec&lt;&#x2F;code&gt; of glyph vertices for text, and a texture for images. These primitive types wrap their heap-allocated part in an &lt;code&gt;Rc&lt;&#x2F;code&gt; pointer to allow them to be cheaply cloned and diffed.&lt;&#x2F;p&gt;
&lt;p&gt;For example, a &lt;code&gt;SolidMeshPrimitive&lt;&#x2F;code&gt; is stored like this (not exactly this, it&#x27;s been simplified a bit for this example):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SolidMeshPrimitive &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This part is copied to the batch&amp;#39;s vertex and index buffer.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mesh&lt;&#x2F;span&gt;&lt;span&gt;: Rc&amp;lt;SolidMesh&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This part is copied to the batch&amp;#39;s uniform&#x2F;push constants buffer.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;uniform&lt;&#x2F;span&gt;&lt;span&gt;: MeshUniforms,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SolidMesh &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vertices&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;SolidVertex2D&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;indices&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Copy, Clone, Debug, PartialEq, bytemuck::Pod, bytemuck::Zeroable)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SolidVertex2D &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;; 2],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;: PackedSrgb,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;repr&lt;&#x2F;span&gt;&lt;span&gt;(C)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Clone, Copy, PartialEq, bytemuck::Pod, bytemuck::Zeroable)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;MeshUniforms &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;; 2],
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F; A 2d transformation represented by a column-major 3 by 3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F; matrix, compressed down to 3 by 2.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;; 6],
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F; Whether or not to apply the `transform` matrix. This is used
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F; to optimize meshes with no transformations.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F; By default this is set to `0` (false).
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;has_transform&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Doing this also allows multiple primitives to share the same buffer of data in the GPU. For example, you can have multiple knob widgets share the same index and vertex buffer to an arc mesh, with only offset&#x2F;rotation&#x2F;scale being copied to a uniform buffer for each instance. (Though for now I haven&#x27;t actually made this optimization in RootVG yet. More testing is needed to see if this will actually improve performance in practice.)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;how-primitives-are-sorted&quot;&gt;How Primitives are Sorted&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;To improve performance on the GPU side, the number of draw calls should be reduced as much as possible.&lt;&#x2F;p&gt;
&lt;p&gt;For example, say you have many knob widgets in an application. And say that each knob renders multiple parts: an image as the knob&#x27;s body, a rectangle on top as the &quot;notch&quot; on the knob, an arc around the knob showing its modulation range, and a label of text below it with a background.&lt;&#x2F;p&gt;
&lt;p&gt;If you try to render each knob widget one by one in order, you would be doing a bunch of operations on the GPU:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;switch to image pipeline&lt;&#x2F;li&gt;
&lt;li&gt;draw call to render the image of the knob&#x27;s body&lt;&#x2F;li&gt;
&lt;li&gt;switch to quad pipeline&lt;&#x2F;li&gt;
&lt;li&gt;draw call to render the knob&#x27;s &quot;notch&quot;&lt;&#x2F;li&gt;
&lt;li&gt;switch to mesh pipeline&lt;&#x2F;li&gt;
&lt;li&gt;draw call to render the arc showing the modulation range&lt;&#x2F;li&gt;
&lt;li&gt;switch to quad pipeline&lt;&#x2F;li&gt;
&lt;li&gt;draw call to render the quad underneath the label&lt;&#x2F;li&gt;
&lt;li&gt;switch to text pipeline&lt;&#x2F;li&gt;
&lt;li&gt;draw call to render the text of the label&lt;&#x2F;li&gt;
&lt;li&gt;repeat steps 1-10 for every knob widget&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Ouch.&lt;&#x2F;p&gt;
&lt;p&gt;Then how about we try rendering all primitives of the same type all at once in a single draw call? The problem is that can make things not be drawn in the order the user expected. Primitives that were supposed to be rendered on top of other primitives could be rendered below them.&lt;&#x2F;p&gt;
&lt;p&gt;The solution is to have the user specify the z index for each primitive in the API. Primitives that have a higher z index are guaranteed to be drawn after ones that have a lower z index. Consequently primitives with the same z index are not guaranteed to be drawn in the same order they were added.&lt;&#x2F;p&gt;
&lt;p&gt;As a bonus, this means that all primitives in the entire app that have the same z index can be batched together, not just for widgets of the same type!&lt;&#x2F;p&gt;
&lt;p&gt;Though there is one caveat. Since this is meant to be used in a GUI library, we also need widgets themselves to have a z index. Some widgets obviously need to be rendered on top of others in the correct order. The solution is to have a &quot;widget z index&quot; that takes the upper part of the final z index and the &quot;internal primitive z index&quot; take the lower part of the final z index. Widgets provide the GUI library with a list of primitives via the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;rootvg&#x2F;blob&#x2F;main&#x2F;src&#x2F;primitive_group.rs&quot;&gt;&lt;code&gt;PrimitiveGroup*&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; struct, and then later when the GUI library adds it to the canvas, RootVG automatically applies the widget&#x27;s z index to each primitive&#x27;s z index (as well as also applying the widget&#x27;s offset to each primitive).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;I haven&#x27;t made an example using the &lt;code&gt;PrimitiveGroup&lt;&#x2F;code&gt; yet. I&#x27;m going to wait until I&#x27;ve worked out the kinks from using it in my own GUI library first.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;z_index&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;widget_z_index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;primitive_z_index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u16&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    (widget_z_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; primitive_z_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now how does RootVG actually use the z index to sort primitives? It simply stores batches into a hash map using the z index as the key.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Clone, Copy, PartialEq, Eq, Hash)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;BatchKey &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;z_index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;BatchEntry &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;solid_meshes&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;SolidMeshPrimitive&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gradient_meshes&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;GradientMeshPrimitive&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;solid_quads&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;SolidQuadPrimitive&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gradient_quads&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;GradientQuadPrimitive&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;TextPrimitive&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;images&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ImagePrimitive&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; (optional custom primitives) ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Canvas &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;batches&lt;&#x2F;span&gt;&lt;span&gt;: FxHashMap&amp;lt;BatchKey, BatchEntry&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When it comes time to render, RootVG collects all the keys in the hashmap into a &lt;code&gt;Vec&lt;&#x2F;code&gt;, and then does an unstable quick sort to sort the keys.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Collect all keys from the hash map into a Vec.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; keys: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;BatchKey&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; batches.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;k).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Sort keys by z index
&lt;&#x2F;span&gt;&lt;span&gt;keys.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;sort_unstable_by&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;| a.z_index.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;b.z_index));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then it simply renders each batch in order.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; keys.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(batch_entry) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; batches.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(key) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; render batch
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;(Note RootVG does not actually render the batches from the hashmap directly, this is just to explain the concept. It actually first prepares the batch entries into the various pipelines and stores the result of the prepare pass into a &lt;code&gt;CanvasOutput&lt;&#x2F;code&gt; struct. The &lt;code&gt;CanvasOutput&lt;&#x2F;code&gt; is then what actually gets rendered.)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;scissoring-rectangles&quot;&gt;Scissoring Rectangles&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;rootvg&#x2F;scissoring-rectangle.png&quot; alt=&quot;scissoring rectangle&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The last piece of the puzzle to make RootVG viable for GUIs is the ability to &quot;scissor&quot; parts of primitives that lie outside a given rectangle.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily GPUs have a built-in method for this, all we need to do is call a method in wgpu. The one caveat is this method must be called between draw calls, meaning that we have to split batches into multiple draw calls for each scissoring rect.&lt;&#x2F;p&gt;
&lt;p&gt;In our case this is easy to do, as all we need is to add the scissoring rectangle as part of the key in our hashmap, and it just works.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Clone, Copy, PartialEq, Eq, Hash)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;BatchKey &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;scissor_rect&lt;&#x2F;span&gt;&lt;span&gt;: RectI32,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;z_index&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Could I have made &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;inniyah&#x2F;nanovg&quot;&gt;NanoVG&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;femtovg&#x2F;femtovg&quot;&gt;FemtoVG&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;audulus&#x2F;vger-rs&quot;&gt;vger&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linebender&#x2F;vello&#x2F;tree&#x2F;main&quot;&gt;Vello&lt;&#x2F;a&gt;, or &lt;a href=&quot;https:&#x2F;&#x2F;skia.org&#x2F;&quot;&gt;Skia&lt;&#x2F;a&gt; work for my GUI library? Honestly, probably.&lt;&#x2F;p&gt;
&lt;p&gt;But since I was already deep in the weeds of GUI, and since a deeper understanding of graphics programming is something I&#x27;ve wanted to learn anyway, I&#x27;m glad I did it. I also now have a library that works really nicely with how my GUI library works, meaning I don&#x27;t need to add extra complexity to my GUI library to optimize rendering.&lt;&#x2F;p&gt;
&lt;p&gt;I also would have never attempted this if awesome libraries like &lt;a href=&quot;https:&#x2F;&#x2F;wgpu.rs&#x2F;&quot;&gt;wgpu&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iced-rs&#x2F;iced&quot;&gt;Iced&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;grovesNL&#x2F;glyphon&quot;&gt;glyphon&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pop-os&#x2F;cosmic-text&quot;&gt;Cosmic Text&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nical&#x2F;lyon&quot;&gt;Lyon&lt;&#x2F;a&gt; haven&#x27;t already done most of the heavy lifting for me. So special thanks to them!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;And in case you&#x27;re wondering, no I haven&#x27;t spent this entire time on just RootVG. I&#x27;ve made substantial progress on my GUI library as well. Stay tuned for that! :)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>2024 Update</title>
        <published>2024-04-05T00:00:00+00:00</published>
        <updated>2024-04-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/2024-update/"/>
        <id>https://billydm.github.io/blog/2024-update/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/2024-update/">&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Alright, I&#x27;m back with something to show you! I&#x27;m sorry it&#x27;s been a while. I feel like I should explain what&#x27;s been going on.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-i-was-doing-the-past-year&quot;&gt;What I was doing the past year?&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The past year has been kind of rough for me. I haven&#x27;t gotten quite as much stuff done as I would have liked to. But I suppose mental and physical health come first. It&#x27;s taken me much longer to regain my footing than I thought it would.&lt;&#x2F;p&gt;
&lt;p&gt;In a &lt;a href=&quot;..&#x2F;clarifying-some-things&quot;&gt;previous blogpost&lt;&#x2F;a&gt; I said I was teaming up with someone who was creating a DAW with a GUI in Flutter that had a sort of similar timeline workflow vision. In a different universe where I was a different kind of person, this would have been an great opportunity.&lt;&#x2F;p&gt;
&lt;p&gt;But as it turns out, it&#x27;s taken me a long journey to realize I truly stay motivated best on large projects when working alone towards a highly specific vision. As a DAW user myself, GUI is very important to me. If I&#x27;m going to be doing this as my career, I want the GUI to be as good as I dream of having it. Otherwise I just don&#x27;t find the motivation to keep at a multiple-year long project.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s not to say I don&#x27;t want other people working on Meadowlark. Just that I figured it&#x27;s best to only delegate tasks to other people that don&#x27;t involve core architecture stuff. I do still very much want help for other tasks like DSP, themes, samples, presets, and other various add-ons. I&#x27;m by no means an expert at DSP or sound design.&lt;&#x2F;p&gt;
&lt;p&gt;I also ultimately decided against Flutter because I want a library that can also be used to make audio plugins that can be loaded into any DAW, not just Meadowlark. Flutter just doesn&#x27;t work for plugins &lt;em&gt;(see my previous blogpost &lt;a href=&quot;..&#x2F;daw-frontend-development-struggles&quot;&gt;DAW Frontend Development Struggles&lt;&#x2F;a&gt; for why)&lt;&#x2F;em&gt;. While there&#x27;s nothing wrong with existing plugin-compatible libraries like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vizia&#x2F;vizia&quot;&gt;Vizia&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iced-rs&#x2F;iced&quot;&gt;Iced&lt;&#x2F;a&gt;, or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&quot;&gt;egui&lt;&#x2F;a&gt;, I would love it if I can have the same framework for both Meadowlark and my plugins. And since I need a solution for Meadowlark anyway, I finally just said screw it, I&#x27;m going to create my own GUI library and tailor the features I need and want. And who knows, maybe other people will find my GUI library useful too, or maybe it can inspire improvements in other GUI frameworks in some way?&lt;&#x2F;p&gt;
&lt;p&gt;I know making a GUI library is very difficult and time consuming. But I&#x27;m not entirely new to this. I&#x27;ve had attempts at a simple GUI library in Rust in the past, and I have some past experience with graphics programming. In a future blogpost, I&#x27;ll explain how I&#x27;ve devised a way to keep the GUI library implementation as simple as possible while still achieving high performance and flexibility.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike other Rust GUI libraries, mine does not aim for &quot;elegant and hard to misuse&quot;. It does not aim to be a &quot;general purpose&quot; GUI library with lots of features. It only contains the features I need. It&#x27;s not even declarative (although in theory you could write a declarative wrapper around it like what &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Relm4&#x2F;Relm4&quot;&gt;Relm4&lt;&#x2F;a&gt; does).&lt;&#x2F;p&gt;
&lt;p&gt;What my GUI library does give you is lots of manual control over how your widgets are structured, styled, and laid out. It&#x27;s sort-of a fusion between some of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iced-rs&#x2F;iced&quot;&gt;Iced&lt;&#x2F;a&gt;&#x27;s concepts and traditional retained-mode GUI library concepts (although without the whole multiple-inheritance object-oriented thing). It uses a sort of &quot;I know where things should go&quot; and &quot;no hidden control flow or fancy macro magic&quot; philosophy.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;coming-up&quot;&gt;Coming Up&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In my &lt;a href=&quot;..&#x2F;rootvg&quot;&gt;next blogpost&lt;&#x2F;a&gt;, I&#x27;ll share a piece of what I accomplished. It&#x27;s a hardware-accelerated 2d vector graphics rendering library called RootVG!&lt;&#x2F;p&gt;
&lt;p&gt;And in case you&#x27;re wondering, no I haven&#x27;t spent this entire time on just RootVG. I&#x27;m also getting closer to completing the GUI library as well. Stay tuned for that too!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust vs C++</title>
        <published>2023-06-07T00:00:00+00:00</published>
        <updated>2023-06-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/rust-vs-cpp/"/>
        <id>https://billydm.github.io/blog/rust-vs-cpp/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/rust-vs-cpp/">&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Rust vs C++, the age old debate. It&#x27;s something I&#x27;ve been intimately struggling with this past year.&lt;&#x2F;p&gt;
&lt;p&gt;I used to be one of those &quot;Rust evangelists&quot; who would sing the praises of Rust and how it will deliver us from the evil that is C++. Now, Rust is still personally my favorite language, but the reasons are a bit different now.&lt;&#x2F;p&gt;
&lt;p&gt;I want to share my perspective on things, and maybe it will help others who are struggling with this or want to know what language they should learn.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;where-rust-is-just-better&quot;&gt;Where Rust is just better&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Let me start off on a positive note by listing some things which, in my experience, Rust is just plain better at.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-build-system&quot;&gt;The build system&lt;&#x2F;h2&gt;
&lt;p&gt;Cargo is &lt;em&gt;so&lt;&#x2F;em&gt; nice. It makes managing dependencies and modularizing and structuring a codebase a breeze, and the fact that the same build system works on all platforms is a huge win (no meta-build systems like CMake).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-package-manager&quot;&gt;The package manager&lt;&#x2F;h2&gt;
&lt;p&gt;Having an official package manager like crates.io is just objectively better. I don&#x27;t think this is a controversial statement.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;better-memory-safety&quot;&gt;Better memory safety&lt;&#x2F;h2&gt;
&lt;p&gt;This one kind of goes without saying.&lt;&#x2F;p&gt;
&lt;p&gt;However, I do have some opinions on this which I&#x27;ll get to later on in this article.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;syntax&quot;&gt;Syntax&lt;&#x2F;h2&gt;
&lt;p&gt;Ok, this is more a matter of opinion. Rust&#x27;s syntax can definitely take a while to get use to, but modern C++ can be a &lt;em&gt;lot&lt;&#x2F;em&gt; weirder IMO.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;friendly-community&quot;&gt;Friendly community&lt;&#x2F;h2&gt;
&lt;p&gt;This is more important than you might think, especially if you&#x27;re a beginner learning the language. The Rust community has gone out of its way to make sure it is friendly and inclusive. I&#x27;ve met people who said that Rust chat servers are a safe place for them (and yes I am partly referring to the furries and&#x2F;or lgbtq+ people that seem to somehow be like a third of the makeup of these chat rooms. They&#x27;re great people and I fully support them.)&lt;&#x2F;p&gt;
&lt;p&gt;Now this isn&#x27;t to say that the Rust community is always a shining beacon of kindness, you of course have the occasional bad actor. But still I think these communities have done a good job of maintaining their status.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;That being said, I&#x27;ve heard stories of C++ developers having a bad first impression of the community since some rustaceans are quick to criticize them for liking C++. Even if these people have good intentions, I think they are doing more harm to Rust&#x27;s image than good. We need to keep in mind to respect other people&#x27;s experiences on the subject.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;rust-s-shortcomings&quot;&gt;Rust&#x27;s Shortcomings&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Now comes the part where I share my struggles with the language. I think it&#x27;s important to look at things realistically, and I think evangelizing Rust as something that is better in every way might actually do more harm for the language than good. If we don&#x27;t acknowledge the shortcomings, both new and experienced developers may end up hitting a brick wall of frustration.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-ecosystem&quot;&gt;The Ecosystem&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This is a big one. Like really big. I think the Rust community tends to overstate the capabilities of the current ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to writing capable software, features are key. Real-world software has a lot of nuance to it. You can&#x27;t just assume that a pretty-looking minimalistic API will work for all use cases.&lt;&#x2F;p&gt;
&lt;p&gt;While this feature problem is most prevalent in the Rust GUI landscape, I&#x27;ve noticed it in other areas too. For instance, specifically for what I&#x27;m trying to do, I&#x27;ve struggled to find a cross-platform library for proper low-latency connections to system audio and MIDI devices.&lt;&#x2F;p&gt;
&lt;p&gt;Let me tell you, when a Rust library works great for your use case, it&#x27;s &lt;em&gt;amazing&lt;&#x2F;em&gt;. But when it doesn&#x27;t, it &lt;em&gt;sucks&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To put this in perspective, it&#x27;s important to keep in mind just how vast the C++ ecosystem is. There are so many solutions available. It becomes disheartening to learn that a C or C++ library already does what you want, but Rust doesn&#x27;t have one.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h3&gt;
&lt;p&gt;There is a way around this issue, and that is to use bindings to existing C or C++ libraries.&lt;&#x2F;p&gt;
&lt;p&gt;When you first learn Rust and how great it can be, it becomes all too easy to want &quot;Rust purism&quot;, where you only depend on libraries that are written in Rust. However, I&#x27;ve come to learn that if you wish to make production-ready software in Rust, you shouldn&#x27;t shy away from the idea of using bindings to mature C&#x2F;C++ libraries.&lt;&#x2F;p&gt;
&lt;p&gt;There is so much time and effort that has gone into these mature libraries. Sure they aren&#x27;t perfect, but they can help you get the job done.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I recently created my own Rust bindings to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;thestk&#x2F;rtaudio&quot;&gt;RtAudio&lt;&#x2F;a&gt; called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;rtaudio-sys&quot;&gt;rtaudio-sys&lt;&#x2F;a&gt;, as well as a safe and easy-to-use wrapper around it called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;rtaudio-rs&quot;&gt;RtAudio-rs&lt;&#x2F;a&gt;. It took a while to learn how to do, and there were some headaches along the way. But if and when I have to do it again, I&#x27;ll be more comfortable with it.&lt;&#x2F;p&gt;
&lt;p&gt;That being said, I don&#x27;t recommend trying to create your own Rust bindings to a library if you&#x27;re new to Rust. You need to learn how Rust build scripts work, and you also need some experience and knowledge in creating safe wrappers around unsafe FFI code.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So my word of advice is: if you are thinking about using Rust for your project, unless you are willing to fill in the gaps yourself, make sure that Rust libraries can actually do what you want first. For a lot of use cases, I think the answer is actually yes, the Rust ecosystem is able to do what you want. But for other use cases the answer may be no. And even then, you need to be okay with sometimes relying on younger experimental libraries rather than mature and battle-tested ones.&lt;&#x2F;p&gt;
&lt;p&gt;Obviously the C and C++ ecosystem has had a lot more time and money thrown into it. Perhaps one day Rust will truly catch up, but pretending it&#x27;s already there is being unrealistic.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;strictness-can-be-a-double-edged-sword&quot;&gt;Strictness can be a double-edged sword&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Rust is very strict in what you can and can&#x27;t do, and that is of course by design. Computers are inherently unsafe machines, and it takes a lot to prevent developers from messing up.&lt;&#x2F;p&gt;
&lt;p&gt;One of Rust&#x27;s defining features is that it forces you to design your code architecture in a memory-safe, less error-prone way. And when you do need to use unsafe features, you can wrap the unsafe parts in a safe abstraction that can&#x27;t be misused. In most cases, this works wonderfully.&lt;&#x2F;p&gt;
&lt;p&gt;But I do think there&#x27;s an important &quot;limit&quot; to this tradeoff that should be considered. If you remember my previous post &lt;a href=&quot;https:&#x2F;&#x2F;billydm.github.io&#x2F;blog&#x2F;rust-vs-cpp&#x2F;.&#x2F;daw-frontend-development-struggles.md&quot;&gt;DAW Frontend Development Struggles&lt;&#x2F;a&gt;, I presented the idea of the &quot;performance, velocity, and adaptability&quot; triangle (and in this context, you can interchange &quot;adaptability&quot; with &quot;abstractions&quot;).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;daw-frontend-development-struggles&#x2F;performance-velocity-adaptability.png&quot; alt=&quot;performance-velocity-adaptability chart&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There comes a point where having to deal with safe abstractions and &quot;less error prone&quot; code architectures really feels like it&#x27;s more effort than it&#x27;s worth. Sometimes it even comes at the cost of performance as well (the Rust GUI ecosystem is one the best examples of this). It&#x27;s important that we acknowledge these frustrations. Pretending like it&#x27;s not a problem is only going to deter people away.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There&#x27;s a common pattern I see all too often in Rust code, which I call a &quot;pointer with extra steps&quot;. It&#x27;s when you have integer &quot;IDs&quot; that are used to index into an vector or a hashmap. This essentially recreates the functionality of a pointer without having Rust&#x27;s compiler complain at you. While sometimes this makes sense, other times it&#x27;s a roundabout way of doing things and the performance can actually be slower than if you just used the &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt;smart pointer in Rust (indexing requires an extra multiply and add operation, and a hashmap requires even more steps). And if you are creating a custom data structure, &lt;code&gt;Rc&amp;lt;UnsafeCell&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt; (or even raw pointers) would be even faster. But of course since &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt; is cumbersome to type and indexing into a vector or a hashmap is not, people tend to choose the latter.&lt;&#x2F;p&gt;
&lt;p&gt;Although there is a situation where indexing with integer IDs can make more sense, and that&#x27;s when you are iterating multiple elements at a time in a (not too large) vector. Because the elements are laid out in contiguous memory, if the size of the Vec in bytes is small enough to fit inside the CPU&#x27;s cache, then this can actually be faster than dereferencing multiple smart pointers.&lt;&#x2F;p&gt;
&lt;p&gt;Another valid use case for indexing into a vector is when you need a pointer in one thread that references owned mutable data in another thread (because &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt; can be slower). Though when it comes to hashmaps, I&#x27;m not sure whether the &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt; smart pointer is faster or if the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;fnv&quot;&gt;FNV hashmap&lt;&#x2F;a&gt; is faster. My gut instinct says the former should be faster, but I haven&#x27;t measured it.&lt;&#x2F;p&gt;
&lt;p&gt;Edit: some corrections&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I&#x27;ve experienced this first-hand when creating my DAW engine. It gets tempting to just throw in &lt;code&gt;UnsafeCell&lt;&#x2F;code&gt;s and unsafe functions in places.&lt;&#x2F;p&gt;
&lt;p&gt;Sadly though, I don&#x27;t have a real solution to this problem, aside from just encouraging crate developers to create more solutions that can cover more and more use cases. Don&#x27;t provide just one way of doing things in an API for the sake of &quot;prettiness&quot;, provide multiple ways to use the library to better fit with more use cases. Don&#x27;t shy away from traditional concepts the require &quot;uglier&quot; APIs.&lt;&#x2F;p&gt;
&lt;p&gt;And for non-crate developers, you shouldn&#x27;t be afraid to resort to unsafe Rust if your use case really does call for it. If you aren&#x27;t creating a library for others to use, and creating safe abstractions is too much work, try just putting a comment saying exactly what you can and can&#x27;t do with a function (and mark that function as &lt;code&gt;unsafe&lt;&#x2F;code&gt;). As long as your codebase isn&#x27;t too large and complicated, this kind of old-school global reasoning can be effective.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dsp-in-rust&quot;&gt;DSP in Rust&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;There&#x27;s another area where I&#x27;ve found Rust&#x27;s rules to be a slightly more of a hinderance than a help, and that is with actual DSP processing code. (This is definitely a minor issue that can be worked around, but I think it&#x27;s still worth mentioning.)&lt;&#x2F;p&gt;
&lt;p&gt;DSP code needs to fast. A single gain operation on a stereo signal at 48,000 samples a second requires 96,000 multiply operations. Any additional runtime memory-safety checks like bounds checking an array index will really add up.&lt;&#x2F;p&gt;
&lt;p&gt;The Rust compiler needs to be absolutely sure that things are sound before removing those runtime checks for you. Now while it&#x27;s great at optimizing simple DSP algorithms, I found it can struggle with more complicated real-world DSP pipelines. If you really care about performance, you need to check the assembly output to make sure it is doing what you want, and if it&#x27;s not, add some additional code to try and coerce it into realizing that it&#x27;s safe. (And also make sure that a future compiler update doesn&#x27;t break it.)&lt;&#x2F;p&gt;
&lt;p&gt;You can of course use unsafe Rust to get around this issue, but IMO that kind of defeats the purpose of using Rust for DSP in the first place. (However, in the context of making audio plugins, I do think Rust still helps with all of the plumbing involved, especially with libraries like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbert-vdh&#x2F;nih-plug&quot;&gt;nih-plug&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;And if you want to use SIMD intrinsics (and you should if you&#x27;re serious about DSP), you need to use unsafe anyway. This is because the SIMD functions in Rust are marked unsafe since they can cause undefined behavior if the code is ran on the wrong processor. There is an official solution to this in the works called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;portable-simd&quot;&gt;portable-simd&lt;&#x2F;a&gt;, but it&#x27;s still only available on the less-stable nightly compiler.&lt;&#x2F;p&gt;
&lt;p&gt;And yes, auto-vectorization is a thing, but again it can be unreliable for more complicated DSP pipelines.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There&#x27;s also the problem I have with the fact that because I want to use a lot of existing open source DSP in my projects, I would have to spend extra time translating that DSP code from C++ to Rust. It&#x27;s yet another tradeoff that made me once consider switching to C++.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;modern-c-isn-t-that-bad&quot;&gt;Modern C++ isn&#x27;t &lt;em&gt;that&lt;&#x2F;em&gt; bad&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Yes, Rust is still better, but I do think modern idiomatic C++ gets a bad rap.&lt;&#x2F;p&gt;
&lt;p&gt;C++ isn&#x27;t standing still, it&#x27;s always adding better and safer features. Now of course it has the problem of not depreciating old features and legacy codebases, but I think the point still stands. If you become proficient with modern idiomatic C++ and good code architecture, I believe you can go a long ways without too many issues. Adding to this, modern linters and other static analyzer tools are there to help provide some guardrails.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some additional tools I found can help make you life easier with C++:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cpm-cmake&#x2F;CPM.cmake&quot;&gt;CPM&lt;&#x2F;a&gt; - Dependency management tools for CMake&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;catchorg&#x2F;Catch2&quot;&gt;Catch2&lt;&#x2F;a&gt; - C++ unit testing framework&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fmtlib&#x2F;fmt&quot;&gt;{fmt}&lt;&#x2F;a&gt; - A modern string formatting library (especially useful for debugging and logging)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;infer&quot;&gt;Infer&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jbenden&#x2F;vscode-c-cpp-flylint&quot;&gt;Flylint&lt;&#x2F;a&gt; - Linting and static analysis tools&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;sanitizers&quot;&gt;sanitizers&lt;&#x2F;a&gt; - A list of memory sanitizers&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;oss-fuzz&quot;&gt;OSS-Fuzz&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;llvm.org&#x2F;docs&#x2F;LibFuzzer.html&quot;&gt;libFuzzer&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AFLplusplus&#x2F;AFLplusplus&quot;&gt;AFL++&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;honggfuzz&quot;&gt;Honggfuzz&lt;&#x2F;a&gt; - Fuzzing tools&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, there is something to be said if you are working with a team of developers on a larger project. It&#x27;s hard to enforce everyone to use modern features, practices, and tools. And on top of that, miscommunications can still lead to a lot of problems.&lt;&#x2F;p&gt;
&lt;p&gt;This is where I think Rust truly shines. The strict type system, borrow checker, and compiler-enforced rules are proving to be invaluable for large software projects. It&#x27;s no wonder large companies like Microsoft are &lt;a href=&quot;https:&#x2F;&#x2F;www.techspot.com&#x2F;news&#x2F;98492-microsoft-rewriting-windows-rust-sort.html&quot;&gt;planning to adopt Rust&lt;&#x2F;a&gt; for some of its systems.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-non-metallic-elephant-in-the-room&quot;&gt;The non-metallic elephant in the room&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And lastly, there&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carbon-language&#x2F;carbon-lang&quot;&gt;Carbon&lt;&#x2F;a&gt; on the horizon. A C++-compatible language with a cleaner syntax and a memory-safe subset seems like a killer solution. If it&#x27;s successful, it might just well be &lt;em&gt;the&lt;&#x2F;em&gt; language that supersedes C++.&lt;&#x2F;p&gt;
&lt;p&gt;But it&#x27;s still quite a ways from being production-ready, so who knows?&lt;&#x2F;p&gt;
&lt;p&gt;Even then, I think it&#x27;s daft to think that Carbon will &lt;em&gt;replace&lt;&#x2F;em&gt; Rust someday. Carbon is meant to be a transitional solution, with languages like Rust, Go, Swift, and Kotlin still being a better option &lt;em&gt;if&lt;&#x2F;em&gt; you have the luxury of not maintaining a legacy C++ codebase.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;C++ is definitely messy, but so is the real world. I&#x27;ve come to learn that it&#x27;s just another tool, and if someone prefers it, then they shouldn&#x27;t be berated for using it. (The same can be said for C, although I do think maintaining a large codebase in C is much harder.)&lt;&#x2F;p&gt;
&lt;p&gt;And for me personally, there&#x27;s one main reason I&#x27;m choosing to stick with Rust: I&#x27;m just used to it now. I&#x27;ve become really proficient with it, and it would take a lot of work to reach that same level of proficiency in C++. In the end, that&#x27;s the ultimate goal of a programming language, to allow you to create the software you want as quickly and easily as possible.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Clarifying Some Things, and What I&#x27;m Doing Now</title>
        <published>2023-05-16T00:00:00+00:00</published>
        <updated>2023-05-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/clarifying-some-things/"/>
        <id>https://billydm.github.io/blog/clarifying-some-things/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/clarifying-some-things/">&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Welp, apparently one of my previous posts &lt;a href=&quot;..&#x2F;daw-frontend-development-struggles&quot;&gt;DAW Frontend Development Struggles&lt;&#x2F;a&gt; is trending on Hacker News and the Rust subreddit. Couldn&#x27;t have come at a more awkward time.&lt;&#x2F;p&gt;
&lt;p&gt;I want to take this time to clarify some things, as well as what my current plans for Meadowlark are. Some of my opinions have changed somewhat since that post.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;clarifications&quot;&gt;Clarifications&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I want to clarify that I do think a fully-featured GUI library in Rust is possible, it&#x27;s just that it&#x27;s still a few years away.&lt;&#x2F;p&gt;
&lt;p&gt;Also I want to state that my complications have more to do with the fact that I&#x27;m writing a complicated DAW GUI and not a typical application. Existing Rust GUI libraries are already (mostly) competent at this.&lt;&#x2F;p&gt;
&lt;p&gt;And yeah, I was maybe a bit quick to dismiss &lt;a href=&quot;https:&#x2F;&#x2F;slint-ui.com&#x2F;&quot;&gt;slint&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;makepad&#x2F;makepad&quot;&gt;makepad&lt;&#x2F;a&gt; in my post. I now have a different reason for not going with those which I&#x27;ll explain below, but I don&#x27;t want to downplay the potential of these projects (and also projects like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vizia&#x2F;vizia&quot;&gt;vizia&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iced-rs&#x2F;iced&quot;&gt;iced&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;I now think declarative is probably possible to use for something as complex as a DAW (although it&#x27;s still more cumbersome IMO). Immediate mode might also work if executed correctly.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linebender&#x2F;xilem&quot;&gt;xilem&lt;&#x2F;a&gt; architecture also seems very promising in solving a lot of the problems that a GUI library in Rust has. But of course it&#x27;s just an experiment at the moment.&lt;&#x2F;p&gt;
&lt;p&gt;Also my opinion on the importance of damage-tracking has changed somewhat. I no longer think it&#x27;s &lt;em&gt;that&lt;&#x2F;em&gt; important in the advent of modern GPUs. But I do still think that more consideration should be given to minimizing the work being done on the GPU.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sparking-discussion-on-rust-guis&quot;&gt;Sparking Discussion on Rust GUIs&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;That being said, I think the original opinions I had in my previous post illustrate an important point.&lt;&#x2F;p&gt;
&lt;p&gt;It goes to show that a lot of work and careful considerations are needed if we ever want a truly general purpose Rust GUI toolkit to take over. I&#x27;m sure I&#x27;m not the only one who has been frustrated by the state of the Rust GUI ecosystem.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;gui-is-hard&quot;&gt;GUI is &lt;em&gt;Hard&lt;&#x2F;em&gt;&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I can&#x27;t stress this point enough. There&#x27;s so much more to GUI than meets the eye.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;edit&quot;&gt;Edit:&lt;&#x2F;h3&gt;
&lt;p&gt;Now while that point still stands, I think I was being unfair with my previous edit.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a lot of &quot;one man&quot; Rust GUI libraries out there. There&#x27;s nothing wrong with that, and they can already be used for a wide variety of applications. I think most if not all these projects aren&#x27;t actually trying to directly compete with the likes of QT, JUCE, GTK, Flutter, Electron, etc. They are aiming to be a solution for a different problem, and I believe they are achieving that very well.&lt;&#x2F;p&gt;
&lt;p&gt;My personal favorite is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&quot;&gt;egui&lt;&#x2F;a&gt;, it makes it so easy to whip up prototypes, and the performance isn&#x27;t bad either.&lt;&#x2F;p&gt;
&lt;p&gt;With that out of the way, I still want to give you my list from the previous edit. The point I&#x27;m now making is that if the goal of a particular Rust GUI library &lt;em&gt;is&lt;&#x2F;em&gt; to compete in the big leagues, there are a lot of complicated hidden details that must be addressed. While not every one of these features need to be included, I think it gives a good overall idea of the complexity we&#x27;re dealing with here.&lt;&#x2F;p&gt;
&lt;p&gt;Some of these features include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Extensive documentation, examples, and tutorials (hello worlds and 7GUIs alone aren&#x27;t enough)&lt;&#x2F;li&gt;
&lt;li&gt;Accessibility features. This one is hard to get right.&lt;&#x2F;li&gt;
&lt;li&gt;Proper unicode text support. Even better if it has support for inline styling. This one is &lt;em&gt;very&lt;&#x2F;em&gt; hard to get right.&lt;&#x2F;li&gt;
&lt;li&gt;Text that looks sharp even at small sizes. I say this because a lot of Rust GUI libraries currently use GPU-based text rendering which doesn&#x27;t look very good.&lt;&#x2F;li&gt;
&lt;li&gt;Built-in features to help with localization&lt;&#x2F;li&gt;
&lt;li&gt;Support to easily use custom icons&lt;&#x2F;li&gt;
&lt;li&gt;Proper multi-window support (this is harder than you might think)&lt;&#x2F;li&gt;
&lt;li&gt;Proper drag-and-drop support. This includes both internal drag-and-drop, and drag-and-drop from the OS.&lt;&#x2F;li&gt;
&lt;li&gt;Proper touch support. Even if you aren&#x27;t targeting mobile, users with touchscreen laptops and tablets will still expect touch to work.&lt;&#x2F;li&gt;
&lt;li&gt;Flexible state management and widget composition. Real-world applications commonly have unusual requirements and edge cases, and so the user shouldn&#x27;t be locked into one way of doing things. This one is more a matter of opinion though, and it may be possible to create an API that covers most if not all use cases.&lt;&#x2F;li&gt;
&lt;li&gt;Features that allow the user to better optimize the performance of their UI. Don&#x27;t leave optimizations decisions purely up to the UI engine.&lt;&#x2F;li&gt;
&lt;li&gt;Proper support for drawing custom widgets. This includes the ability to draw more complicated shapes like arcs and BÃ©zier curves. These complex shapes don&#x27;t always need to be GPU-accelerated, but they need to be possible. A common use case to be aware of is interactive graphs and plots.&lt;&#x2F;li&gt;
&lt;li&gt;Support for custom shaders (along with the ability to draw widgets on top of the shader area). People will want this. This is also now more complicated because Apple is getting rid of support for OpenGL. You now need to support Metal as well. This will also be needed if you want to support video playback.&lt;&#x2F;li&gt;
&lt;li&gt;If using immediate mode, make sure to use a lot of caching techniques to meet performance demands when scaled to large project sizes (or even use retained-mode under the hood).&lt;&#x2F;li&gt;
&lt;li&gt;If not using damage tracking for rendering, give careful consideration on how to optimize, minimize, and cache the commands that are sent to the GPU.&lt;&#x2F;li&gt;
&lt;li&gt;If using a declarative API, make sure that it&#x27;s possible to declare the UI in code rather than a markup language (and have documentation and examples for how to do this). Not everyone likes using the markup language approach.&lt;&#x2F;li&gt;
&lt;li&gt;Fast incremental compiles (or even better, hot-reloading)&lt;&#x2F;li&gt;
&lt;li&gt;Support for &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Pointer_Lock_API&quot;&gt;pointer locking&lt;&#x2F;a&gt;. Well ok, this is a pretty niche feature, but let me tell you if you do need it it really sucks if the UI library doesn&#x27;t support it.&lt;&#x2F;li&gt;
&lt;li&gt;Bindings to other languages (especially a scripting language like Python or &lt;del&gt;Javascript&lt;&#x2F;del&gt; Typescript). This alone will make the project accessible to a &lt;em&gt;lot&lt;&#x2F;em&gt; more people.&lt;&#x2F;li&gt;
&lt;li&gt;Detailed unicode text editing (single-line and multi-line). This is &lt;em&gt;very&lt;&#x2F;em&gt; hard to get right.&lt;&#x2F;li&gt;
&lt;li&gt;Ability to click links in user-generated text&lt;&#x2F;li&gt;
&lt;li&gt;Support for a variety of image formats, including SVG and GIF&lt;&#x2F;li&gt;
&lt;li&gt;Loading placeholders for images and other content that is being downloaded&lt;&#x2F;li&gt;
&lt;li&gt;Ability to play sound effects (although this one could be handled by a separate crate)&lt;&#x2F;li&gt;
&lt;li&gt;Ability to playback videos (offline and streaming). This should also include control overlays.&lt;&#x2F;li&gt;
&lt;li&gt;Integration with native menubars and other window controls&lt;&#x2F;li&gt;
&lt;li&gt;Support for borderless windows&lt;&#x2F;li&gt;
&lt;li&gt;Integration with native dialogs such as file dialogs and print dialogs&lt;&#x2F;li&gt;
&lt;li&gt;Integration with OS notifications and media controls&lt;&#x2F;li&gt;
&lt;li&gt;Proper password input, as well as integration with the OS&#x27;s keychain&lt;&#x2F;li&gt;
&lt;li&gt;Support for custom keyboard shortcuts, along with the ability to change those shortcuts at runtime&lt;&#x2F;li&gt;
&lt;li&gt;Kinetic scrolling for touch screens (although this probably isn&#x27;t that necessary unless you&#x27;re targeting mobile)&lt;&#x2F;li&gt;
&lt;li&gt;Infinitely scrolling lists (very hard to get right)&lt;&#x2F;li&gt;
&lt;li&gt;Ability to move panels using drag-and-drop, as well as the ability to pop-out panels into a floating window&lt;&#x2F;li&gt;
&lt;li&gt;Support for custom layouts for things like node editors&lt;&#x2F;li&gt;
&lt;li&gt;Animation support&lt;&#x2F;li&gt;
&lt;li&gt;Nested drop-down menus, as well as the ability to scroll drop-downs that are taller than the screen.&lt;&#x2F;li&gt;
&lt;li&gt;Proper nested tree widget&lt;&#x2F;li&gt;
&lt;li&gt;Proper table widget&lt;&#x2F;li&gt;
&lt;li&gt;Some more advanced widgets like calendars, color selectors, and emoji input dialogs (although these could be handled by third-party extensions)&lt;&#x2F;li&gt;
&lt;li&gt;Also don&#x27;t forget to include any of the essential widgets. These lists of built-in widgets in &lt;a href=&quot;https:&#x2F;&#x2F;docs.gtk.org&#x2F;gtk3&#x2F;visual_index.html&quot;&gt;GTk3&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;docs.gtk.org&#x2F;gtk4&#x2F;visual_index.html&quot;&gt;GTK4&lt;&#x2F;a&gt; can give you a good idea.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;JUCE doesn&#x27;t actually have a lot of these features. Its focus is on audio software, and not general use. Existing Rust libraries like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vizia&#x2F;vizia&quot;&gt;vizia&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iced-rs&#x2F;iced&quot;&gt;iced&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&quot;&gt;egui&lt;&#x2F;a&gt; are already quite competent at the audio plugin use case (which is the majority of JUCE&#x27;s user base).&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;audulus&#x2F;rui&quot;&gt;rui&lt;&#x2F;a&gt; library also seems promising for this use case since it is specifically being used for a commercial audio application. Though I&#x27;m not sure anyone has actually tried to make an audio plugin with it yet.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;what-i-learned-about-open-source&quot;&gt;What I Learned About Open Source&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I learned a very important lesson from my struggles. Not just my struggles with the UI, but with Meadowlark itself.&lt;&#x2F;p&gt;
&lt;p&gt;You can&#x27;t rely on volunteers to build key components of a large open source project. Unless you have found someone else who is as passionate as you are, has the same vision as you do, and has as much free time as you do (or unless you&#x27;re running a business with employees), you must be prepared that you will be working on it alone for a &lt;em&gt;long&lt;&#x2F;em&gt; time. You must be prepared that you will do the vast majority of the work yourself. You also need to understand your limits as a solo developer (which is something I previously grossly miscalculated).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-i-m-doing-now&quot;&gt;What I&#x27;m Doing Now&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I learned that I simply cannot make both a DAW engine and a DAW frontend on my own. I severely underestimated the frontend. I&#x27;m only one person.&lt;&#x2F;p&gt;
&lt;p&gt;But that&#x27;s ok, because I actually have found someone else who is working on their own DAW frontend, and they are very good at it. By coincidence (or maybe it&#x27;s fate?), they share a similar vision to what I had with Meadowlark&#x27;s UI. So we decided to team up, with them working on the frontend and me working on the backend engine.&lt;&#x2F;p&gt;
&lt;p&gt;They&#x27;re using Flutter, and it&#x27;s impressive what they were able to do with it. So Meadowlark (or whatever we end up calling it) will use Flutter for mainly that reason.&lt;&#x2F;p&gt;
&lt;p&gt;They were originally going to use the &lt;a href=&quot;https:&#x2F;&#x2F;www.tracktion.com&#x2F;develop&#x2F;tracktion-engine&quot;&gt;Tracktion Engine&lt;&#x2F;a&gt; for the backend, but they agreed that having a new open source engine would be beneficial.&lt;&#x2F;p&gt;
&lt;p&gt;And so here&#x27;s what I&#x27;m doing now: I&#x27;m creating my own DAW engine like Tracktion&#x27;s, but with these notable advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Modular ecosystem: you only need to include the parts of the engine you use&lt;&#x2F;li&gt;
&lt;li&gt;Good documentation&lt;&#x2F;li&gt;
&lt;li&gt;Written in Rust, with all the safety advantages that brings&lt;&#x2F;li&gt;
&lt;li&gt;Zero dependencies on JUCE&lt;&#x2F;li&gt;
&lt;li&gt;Full first-class support for all of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;free-audio&#x2F;clap&quot;&gt;CLAP&lt;&#x2F;a&gt;&#x27;s features, allowing for some exciting new ways to use plugins&lt;&#x2F;li&gt;
&lt;li&gt;Better control over the engine: it doesn&#x27;t force you to use a certain workflow&lt;&#x2F;li&gt;
&lt;li&gt;Additional bindings to C and C++&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Maybe&lt;&#x2F;em&gt; MIT license? I haven&#x27;t decided on that yet.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Maybe I might even try monetizing the engine in some way. Whether that be dual-licensing or sponsorships, I haven&#x27;t decided yet.&lt;&#x2F;p&gt;
&lt;p&gt;This DAW engine will be called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;dropseed&quot;&gt;Dropseed&lt;&#x2F;a&gt; (following the naming scheme I have of native fauna and flora in Kansas. Dropseed is the name of a grass).&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m also creating an FL Studio Patcher-like plugin as a testbed for my engine. I eventually want to have a Patcher-like plugin in Meadowlark anyway, so it&#x27;s still a good use of my time.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;BTW, I&#x27;m not going to mention who this person is or what project they were working on yet. I don&#x27;t want to drive unwanted attention towards them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Why I&#x27;m Taking a Break from Meadowlark</title>
        <published>2023-04-14T00:00:00+00:00</published>
        <updated>2023-04-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/why-im-taking-a-break-from-meadowlark/"/>
        <id>https://billydm.github.io/blog/why-im-taking-a-break-from-meadowlark/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/why-im-taking-a-break-from-meadowlark/">&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I want to explain in this blog why I&#x27;m putting Meadowlark and all its sub-projects in a temporary hiatus. And maybe this article can be insightful for anyone else wanting to create a large-scale open source project.&lt;&#x2F;p&gt;
&lt;p&gt;In short, I&#x27;ve been feeling overwhelmed, depressed, and anxious lately. You can probably see my frustrations start to pile up in my previous blog &lt;a href=&quot;..&#x2F;daw-frontend-development-struggles&quot;&gt;DAW Frontend Development Struggles&lt;&#x2F;a&gt;, but the issues go deeper than that.&lt;&#x2F;p&gt;
&lt;p&gt;I think the core issue is that I started to break down once I realize just how much of a social job it is to be the manager of a large project. I realized that if I wanted to create the original vision I had for Meadowlark, I would probably need to have more developers working on large chunks of the project. I&#x27;m really just not a people-oriented person, and it&#x27;s causing me to question if this is the kind of career I want in life.&lt;&#x2F;p&gt;
&lt;p&gt;Also there has obviously been a &lt;em&gt;lot&lt;&#x2F;em&gt; of excitement and interest around this project, but the publicity is starting to get to me.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;some-background&quot;&gt;Some Background&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;For context, I am an extremely introverted person, and I&#x27;m also autistic.&lt;&#x2F;p&gt;
&lt;p&gt;Growing up I&#x27;ve always had a passion for mathematics and building things. I&#x27;ve built a lot of stuff out of K&#x27;Nex as a kid, and later my Lego Mindstorms kit sparked my interest in programming. As a teen I taught myself how to make Flash games and programming in general.&lt;&#x2F;p&gt;
&lt;p&gt;My interest in music production and music software started when our parents decided to get each of us kids a musical instrument one summer. Being into electronic music (&lt;em&gt;queue early 2000s techno&lt;&#x2F;em&gt;), I got one of those cheap Casio keyboards. The salesman convinced us to throw in a boxed copy of FL Studio with it. I ended up playing around with FL Studio far more than I did with the keyboard.&lt;&#x2F;p&gt;
&lt;p&gt;A few years ago I got the idea to combine my passion for music software and programming and learn audio programming. At that time I also learned about the Rust programming language, which eventually led me to find the Rust Audio Discord server. From there I realized that it could actually be possible to create a DAW in Rust. And not just any DAW, one that I actually wanted to use myself.&lt;&#x2F;p&gt;
&lt;p&gt;I knew going in that it was going to take a &lt;em&gt;long&lt;&#x2F;em&gt; time to develop a DAW, but I wanted a career I was passionate about.&lt;&#x2F;p&gt;
&lt;p&gt;But now I&#x27;ve been working on Meadowlark for over 2 years now and starting to question things.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;scope&quot;&gt;Scope&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I&#x27;m worried that I may have bitten off more than I can chew with the features I touted in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;Meadowlark&#x2F;blob&#x2F;main&#x2F;DESIGN_DOC.md&quot;&gt;Meadowlark&#x27;s design doc&lt;&#x2F;a&gt;. Even the MVP features alone are turning out to be quite difficult.&lt;&#x2F;p&gt;
&lt;p&gt;Currently I&#x27;m stuck between two options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Do I try and create a team of developers for this project (even going as far as possibly hiring developers)?&lt;&#x2F;li&gt;
&lt;li&gt;Or do I limit the scope of Meadowlark and keep working on the majority of it alone?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m really not sure what I want to do. Obviously managing a team gives me a lot of anxiety thinking about it, but at the same time I want Meadowlark to be something that I actually want to use myself.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve also come to realize that I tend to focus better and feel happier when working alone. That may sound odd to a lot of you, but it&#x27;s how my brain works. But at the same time I also know that working alone isn&#x27;t always an option. I&#x27;m still struggling to figure out what kind of career I want in life.&lt;&#x2F;p&gt;
&lt;p&gt;Someone in my Discord suggested perhaps creating something simpler like a tracker before creating a full-blown DAW? It&#x27;s not a bad idea, and maybe I&#x27;ll do that. But again I&#x27;m still trying to decide if I want to have a team of people work on it or if I want to do it mostly by myself.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;architectural-problems&quot;&gt;Architectural Problems&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;My original plan for Meadowlark was to just wing it and develop nearly everything myself for the MVP (minimum viable product) release for Meadowlark, and then go from there. This however didn&#x27;t turn out as well as I hoped. The code began to get really messy and hard to follow with a lot of interconnected parts.&lt;&#x2F;p&gt;
&lt;p&gt;I realize that I need to come up with a better plan for the overall architecture of Meadowlark. Not just for my own sanity, but also for other people who want to chip into the project. Replanning and reworking everything is going to take some time, which is partly why I put this project in hiatus.&lt;&#x2F;p&gt;
&lt;p&gt;If I do decide to have a team of developers, I need to spend time creating an actual design document this time around. Not just explaining the goals of the project, but actual technical plans on how things will work and fit together.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;managing-repositories&quot;&gt;Managing Repositories&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Because of how easy Rust makes it to make modular code, wherever it made sense I split the code into reusable crates such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;dropseed&quot;&gt;dropseed&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;rainout&quot;&gt;rainout&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;creek&quot;&gt;creek&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;pcm-loader&quot;&gt;pcm-loader&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;meadowlark-plugins&quot;&gt;meadowlark-plugins&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;meadowlark-factory-library&quot;&gt;meadowlark-factory-library&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;audio-waveform-mipmap&quot;&gt;audio-waveform-mipmap&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;MeadowlarkDAW.github.io&quot;&gt;Meadowlark&#x27;s website&lt;&#x2F;a&gt;  etc. There are also several forks such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;audio-graph&quot;&gt;audio-graph&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;clack&quot;&gt;clack&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;samplerate-rs&quot;&gt;samplerate-rs&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;rust-libsamplerate&quot;&gt;rust-libsamplerate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I also have several crates outside of the Meadowlark project such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;Awesome-Audio-DSP&quot;&gt;Awesome-Audio-DSP&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iced-rs&#x2F;iced_audio&quot;&gt;iced_audio&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;iced_baseview&quot;&gt;iced_baseview&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;egui-baseview&quot;&gt;egui-baseview&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;imgui-baseview&quot;&gt;imgui-baseview&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;bit_mask_ring_buf&quot;&gt;bit-mask-ring-buf&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BillyDM&#x2F;slice_ring_buf&quot;&gt;slice-ring-buf&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But now I find that managing so many repositories is a headache. Every time I see an issue or a PR, I get anxious about having to now spend my time responding to it, which also seems to disrupt my flow for the rest of the day.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rust-vs-c&quot;&gt;Rust vs C++&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;A part of me kind of regrets choosing Rust when it comes to those sub-projects I mentioned above. If I used C++, I could have just used JUCE and&#x2F;or other well-established C++ libraries for some of those things and saved myself a lot of time.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing I kind of regret is needing to translate existing open source plugin DSP from C++ to Rust. It&#x27;s yet another time sink.&lt;&#x2F;p&gt;
&lt;p&gt;But don&#x27;t get me wrong, I still think Rust is the future. Especially when you have a team of developers, Rust&#x27;s strictness and safety guarantees are invaluable in making sure all that code works together.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s just that if I do decide to keep working on my own, I&#x27;m finding it harder and harder to justify the extra work needed just to be able to use Rust. I&#x27;m still deciding on it, and I also don&#x27;t want to let my other fellow Rust audio programmers down.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;gui-problems&quot;&gt;GUI Problems&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I didn&#x27;t anticipate just how hard of a technical problem the GUI would be. I went into more detail in my recent blog &lt;a href=&quot;..&#x2F;daw-frontend-development-struggles&quot;&gt;DAW Frontend Development Struggles&lt;&#x2F;a&gt;. There are some things I might have gotten wrong in that article such as the importance of damage tracking for rendering (I&#x27;m still on the fence on whether it&#x27;s important or not), but the GUI is still a problem I&#x27;m not sure how to overcome.&lt;&#x2F;p&gt;
&lt;p&gt;Right now I&#x27;m looking into a couple of new contenders for a GUI library such as &lt;a href=&quot;https:&#x2F;&#x2F;flutter.dev&#x2F;&quot;&gt;Flutter&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;dioxuslabs.com&#x2F;&quot;&gt;Dioxus&lt;&#x2F;a&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;www.gtk.org&#x2F;&quot;&gt;GTK4&lt;&#x2F;a&gt; is also still a strong contender. And if I decide to go with C++, JUCE is an obvious choice.&lt;&#x2F;p&gt;
&lt;p&gt;Something to keep in mind is that commercial DAWs like Bitwig and Ableton Live have decided to develop their own in-house GUI solutions. Of course they were started at a time when the general-purpose GUI library landscape was much different, but the point still stands that they calculated that it was worth creating an in-house solution over working around a 3rd-party general-purpose GUI library. Of course these companies also have the luxury of more developers, so I&#x27;m not sure if this is a good idea for Meadowlark even if I do decide to hire a team of developers myself.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing I could do is not worry about performance or looks at all for MVP and use something like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&quot;&gt;egui&lt;&#x2F;a&gt;. But I&#x27;ll still need to switch to a better GUI library at some point, and switching GUI libraries after the fact isn&#x27;t trivial, especially if you have a lot of custom widgets.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;publicity&quot;&gt;Publicity&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I&#x27;m not entirely sure why, but I&#x27;ve started feeling anxious about all the publicity I&#x27;m getting.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve gotten a &lt;em&gt;lot&lt;&#x2F;em&gt; of people joining my Discord server excited about the project. A lot of them are even eager to help contribute code. While this sounds like a great thing, in reality I&#x27;ve been really struggling to figure out what these volunteer developers can actually do to help. It also doesn&#x27;t help that there isn&#x27;t much documentation and that the architecture is currently a mess and needs reworking.&lt;&#x2F;p&gt;
&lt;p&gt;But even if I did have a sound architecture with lots of documentation, I&#x27;m still wary about relying on volunteer effort. For one it makes me anxious thinking about having to create, manage, and coordinate all of those tasks. And two, (I&#x27;m not trying to sound condescending to anyway wanting to help), but I can hardly think of any &quot;good first issue&quot; tasks in something as complex as a DAW (at least for the initial bulk development).&lt;&#x2F;p&gt;
&lt;p&gt;Most of the eager volunteers I get say they are new to Rust and&#x2F;or they want to help as a way to learn how DSP or audio software works. Again I don&#x27;t mean to sound condescending (I was in the same boat myself at one point), but there&#x27;s definitely some prerequisite knowledge required in making a complex DAW codebase. I would have to spend my time getting every volunteer up to speed, which again makes me feel anxious thinking about it.&lt;&#x2F;p&gt;
&lt;p&gt;If I do decide to have a team of developers, I think it would be better to have only a few people (maybe even just one or two) who can dedicate their full time (or maybe part time) to the project. But if I do go that route, I would have to go through the trouble of finding these people and possibly hiring them. Oh and not to mention actually raising the money to hire someone. (Kickstarter maybe?)&lt;&#x2F;p&gt;
&lt;p&gt;Developers aside, all these people being excited and optimistic about this project has also put a lot of pressure on me to perform and deliver something. I thought I would be ok with it, but it&#x27;s starting to get to me.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In my venture to create a DAW I went down many rabbit holes such as DSP, DSP optimizations, audio graphs, plugin hosting, loading and playing audio files, connecting to system audio and MIDI devices, GUI development, GUI performance, etc. In my years of programming I also have experience in things like GPU programming, scripting languages, and game development. I&#x27;ve gotten to know several DAWs very well such as FL Studio, Logic, and Bitwig. I also have an interest in drawing, graphic design, and UX design.&lt;&#x2F;p&gt;
&lt;p&gt;So I feel like if anyone in the world can make this project happen, I have a great shot at it. I want to do something meaningful with all the things I&#x27;ve learned.&lt;&#x2F;p&gt;
&lt;p&gt;But on the other hand do I want to become a project lead or even a CEO of a nonprofit to make that happen? I just don&#x27;t know. I&#x27;m really questioning if I&#x27;m enough of a social-oriented person to do that or be happy doing that.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe I would be happier if I kept working on Meadowlark alone? I&#x27;m just not sure. It seems to have worked out for the developers of projects like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mtytel&#x2F;vital&quot;&gt;Vital&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BespokeSynth&#x2F;BespokeSynth&quot;&gt;Bespoke Synth&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And at the same time I&#x27;m still quite passionate about things like game development and music production. Maybe I would be happier doing that? I don&#x27;t know. Point is this is a journey in my life that I&#x27;m still trying to figure out.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m also seeking professional help by seeing my therapist and my psychiatrist again. (Still have to wait a while to get an opening for an appointment though.)&lt;&#x2F;p&gt;
&lt;p&gt;In the end I really just need to take some time off and figure things out. I&#x27;m lucky to have a very supportive and loving family to help get me through this. Thanks for bearing with me!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>DAW Frontend Development Struggles</title>
        <published>2023-02-21T00:00:00+00:00</published>
        <updated>2023-02-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/daw-frontend-development-struggles/"/>
        <id>https://billydm.github.io/blog/daw-frontend-development-struggles/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/daw-frontend-development-struggles/">&lt;h1 id=&quot;edit&quot;&gt;Edit:&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;My opinions have changed somewhat since I last wrote this blog post, and I wish to clarify some things. Please read the follow-up in my latest post &lt;a href=&quot;..&#x2F;clarifying-some-things&quot;&gt;Clarifying Some Things&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I would like to write about where my head&#x27;s been the past several months. If you&#x27;ve noticed that Meadowlark&#x27;s development has slowed down, this article explains why.&lt;&#x2F;p&gt;
&lt;p&gt;Essentially I&#x27;ve really underestimated how difficult it would be to develop the frontend&#x2F;GUI of Meadowlark. Not just with how complicated a DAW&#x27;s GUI is, but also in finding a GUI library that is actually suitable for the task.&lt;&#x2F;p&gt;
&lt;p&gt;I want to use this blog post to do three things. First I want to highlight why this is such a hard problem. Second I want to share my thoughts on the current state of Rust&#x27;s GUI library ecosystem. And third I want to share some potential paths I can take for the future of Meadowlark.&lt;&#x2F;p&gt;
&lt;p&gt;I would like to hear any thoughts people may have (especially on the part on potential paths for this project). I am most active in my &lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;2W3Xvc8wy4&quot;&gt;Discord server&lt;&#x2F;a&gt; if you are interested in discussion.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;daw-guis-are-complicated&quot;&gt;DAW GUIs are complicated&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Saying that Meadowlark&#x27;s frontend&#x2F;GUI has unusual needs (both performance needs and just features in general) is an understatement. DAWs might just have one of the most complicated GUIs out of any piece of software out there.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some complications I&#x27;ve come across, divided into three parts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance-problems&quot;&gt;Performance problems&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;DAWs have a &lt;em&gt;lot&lt;&#x2F;em&gt; of toolbars and panels (browser panel, timeline panel, piano roll panel, fx rack panel, mixer panel, audio editor panel, automation editor panel, settings panel, etc.).&lt;&#x2F;li&gt;
&lt;li&gt;Some widgets like decibel meters and other visualizers are constantly being animated, meaning the GUI library needs to efficiently redraw the screen every frame.
&lt;ul&gt;
&lt;li&gt;In addition, visualizers can be expensive to render on the CPU (especially spectrograms&#x2F;spectrometers). Ideally you should use custom shaders to render them on the GPU.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Clips on the timeline are notoriously expensive to render. There needs to be some way to cache the contents of clips into a texture (Either directly or by making use of the GUI library&#x27;s &quot;damage tracking&quot; which I&#x27;ll get into later.)
&lt;ul&gt;
&lt;li&gt;Audio clips are the biggest culprit, because rendering waveforms requires the CPU to first do a linear search through the source material for peak values, and then render the waveform pixel-by-pixel (or even better use custom shaders to send commands to the GPU).&lt;&#x2F;li&gt;
&lt;li&gt;Automation clips can contain a bunch of bezier curves, which are slow to render.&lt;&#x2F;li&gt;
&lt;li&gt;Piano roll clips can contain lots of little rectangles in order to display a &quot;minimap&quot; of the MIDI notes inside of it.&lt;&#x2F;li&gt;
&lt;li&gt;On top of all this, clips can contain text labels which can also be expensive to render.&lt;&#x2F;li&gt;
&lt;li&gt;The fact that a timeline is zoom-able also makes it harder to cache the rendering of clips. If the timeline changed its zoom level, all visible clips pretty much have to redraw all of their contents.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Piano rolls can also be expensive to render if there is a bunch of MIDI notes, especially if there are text labels on the notes.&lt;&#x2F;li&gt;
&lt;li&gt;If the user clicks on a folder in a sample browser containing hundreds or even thousands of files, allocating a label widget for each file in the browser list will be very expensive. Something like the &lt;a href=&quot;https:&#x2F;&#x2F;gtk-rs.org&#x2F;gtk4-rs&#x2F;stable&#x2F;latest&#x2F;book&#x2F;list_widgets.html&quot;&gt;list factory in GTK&lt;&#x2F;a&gt; is needed here.&lt;&#x2F;li&gt;
&lt;li&gt;We want to reserve as much CPU as possible for the actual audio processing. Ideally the GUI shouldn&#x27;t take up more than one or two CPU threads.&lt;&#x2F;li&gt;
&lt;li&gt;On some platforms, we also need to make sure there&#x27;s actually enough CPU left for 3rd-party plugins to render their GUIs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;gui-library-problems&quot;&gt;GUI library problems&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;DAWs have unconventional widgets and  layouts. For example, not only does a mixer track contain custom widgets like knobs, sliders, and decibel meters, but all of those widgets are not positioned according to a traditional layout scheme like a list, grid, or a tree.
&lt;ul&gt;
&lt;li&gt;This is especially true if the DAW has a horizontal FX rack like I plan with Meadowlark.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;DAWs don&#x27;t follow traditional&#x2F;recommended design standards or &quot;human interface guidelines&quot;. They have a bunch of custom styling to cram all of that information onto the screen (and to actually look like an audio application).
&lt;ul&gt;
&lt;li&gt;This custom styling and layout also makes it harder to support localization.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Ideally I want to support loading user-generated themes.&lt;&#x2F;li&gt;
&lt;li&gt;Preferably the DAW should let the user pop out panels into another window (or at least support a preset number of multi-window workspaces). Multi-window setups are harder to deal with in code.&lt;&#x2F;li&gt;
&lt;li&gt;The timeline and piano roll are not simple &quot;scroll areas&quot;. They can be zoomed in and out, meaning there needs to be some kind of custom positioning and sizing logic for clips and MIDI notes.&lt;&#x2F;li&gt;
&lt;li&gt;When the timeline is zoomed in very far and&#x2F;or a clip is very long, the resulting width of the clip in pixels can be very, very long. This could cause issues if the UI library tries to render the whole thing (especially if the clip has expensive contents). So you need to make sure only the visible part of the clip is actually processed and rendered.&lt;&#x2F;li&gt;
&lt;li&gt;In order to deal with really long audio clips, you need to stream the file from disk. This makes rendering their contents on the timeline much more complicated because now you are dealing with an async operation.&lt;&#x2F;li&gt;
&lt;li&gt;Some widgets like knobs and sliders need to be able to listen to raw mouse input data as opposed to absolute mouse coordinates (or even better is the ability to use &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Pointer_Lock_API&quot;&gt;pointer locking&lt;&#x2F;a&gt;). Otherwise if the user&#x27;s mouse hits the edge of a screen or moves outside the window while dragging one of these widgets, they will stop working.
&lt;ul&gt;
&lt;li&gt;This is especially true with a horizontal FX rack where there are bunch of knobs and sliders near the bottom of the screen.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;There needs to be some way to easily input the value of a knob&#x2F;slider parameter using a keyboard. Ideally in some sort-of pop-up text input box.&lt;&#x2F;li&gt;
&lt;li&gt;There needs to be extensive support for custom keyboard shortcuts. This includes shortcuts that could potentially conflict with accessibility features such as using the spacebar to start&#x2F;stop the transport.
&lt;ul&gt;
&lt;li&gt;In addition, the UI library needs to support keyboard shortcuts even when a widget&#x2F;window isn&#x27;t focused. For example pressing spacebar to start&#x2F;stop the transport while inside a 3rd-party plugin window.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;There needs to be some way to access the raw window handles in order to host 3rd-party plugin GUIs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;complicated-logic&quot;&gt;Complicated logic&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;There are three separate states that must be kept in sync: The state of the save file (which I call the &quot;source state&quot;), the state of the GUI, and the state of the backend. These have to be separate states because:
&lt;ul&gt;
&lt;li&gt;The source state, the backend, and the GUI sometimes want different units. For example, the start of an audio clip on the timeline may be in units of beats in the source state, units of samples in the backend, and units of pixels in the GUI. So units must somehow be efficiently converted from the source state the the backend&#x2F;GUI state.&lt;&#x2F;li&gt;
&lt;li&gt;The backend process runs on a realtime thread, so you cannot just use simple mutexes to read the source state. Some other method must be used like lock-free message channels or &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;basedrop&#x2F;0.1.2&#x2F;basedrop&#x2F;struct.SharedCell.html&quot;&gt;garbage-collected clone-on-write smart pointers&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;There are situations where the state of the GUI&#x2F;backend can be different from the source state. For example when the user is in the process of dragging the position of a clip on the timeline, the clip needs to move in the GUI, but the change shouldn&#x27;t actually be committed into the source state or backend state until the user lets go of the mouse button. Otherwise it would cause expensive updates to happen every single frame the user is dragging the clip.
&lt;ul&gt;
&lt;li&gt;Another example is when the backend can&#x27;t find a plugin listed in the source state. In this case, both the backend and the GUI will have a &quot;missing plugin&quot; placeholder. But this shouldn&#x27;t cause the original state of the plugin to be overwritten.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;There can be a lot of drag-and-drop targets which can be complicated to implement. For example:
&lt;ul&gt;
&lt;li&gt;dragging samples&#x2F;midi&#x2F;automation from the browser onto the timeline&lt;&#x2F;li&gt;
&lt;li&gt;dragging samples&#x2F;midi&#x2F;automation from the browser onto a track header to add it to the timeline&lt;&#x2F;li&gt;
&lt;li&gt;dragging samples&#x2F;midi&#x2F;automation from the browser into an empty portion of the timeline to add a new track&lt;&#x2F;li&gt;
&lt;li&gt;dragging samples&#x2F;presets from the browser onto a plugin in the horizontal FX rack&lt;&#x2F;li&gt;
&lt;li&gt;dragging a modulation source onto a parameter in the horizontal FX rack&lt;&#x2F;li&gt;
&lt;li&gt;dragging a plugin in the horizontal FX rack into a slot in a container device&lt;&#x2F;li&gt;
&lt;li&gt;dragging a plugin in the horizontal FX rack between two other plugins to reorder them&lt;&#x2F;li&gt;
&lt;li&gt;dragging a plugin from the horizontal FX rack onto a track header to move that plugin to that track&lt;&#x2F;li&gt;
&lt;li&gt;dragging a track header&#x2F;mixer track into an area between two other tracks to reorder them&lt;&#x2F;li&gt;
&lt;li&gt;dragging a clip&#x2F;multiple clips onto a different lane to move them to another track&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The code to interact with the timeline can be very complicated because of all the different operations you can perform. For example:
&lt;ul&gt;
&lt;li&gt;panning&#x2F;scrolling the timeline (horizontally and vertically)&lt;&#x2F;li&gt;
&lt;li&gt;zooming the timeline&lt;&#x2F;li&gt;
&lt;li&gt;clicking to set the position of the playhead&lt;&#x2F;li&gt;
&lt;li&gt;clicking&#x2F;dragging to set the position of the loop points&lt;&#x2F;li&gt;
&lt;li&gt;adding&#x2F;removing&#x2F;dragging time markers&lt;&#x2F;li&gt;
&lt;li&gt;adding&#x2F;removing&#x2F;resizing&#x2F;reordering tracks&#x2F;lanes&lt;&#x2F;li&gt;
&lt;li&gt;using the pencil tool to draw new clips onto the timeline&lt;&#x2F;li&gt;
&lt;li&gt;selecting multiple clips with Ctrl+Click or the lasso tool&lt;&#x2F;li&gt;
&lt;li&gt;dragging one&#x2F;multiple clips horizontally to change their position (and snapping their positions to the grid unless Shift is held down)&lt;&#x2F;li&gt;
&lt;li&gt;using the arrow keys to nudge the position of one&#x2F;multiple clips&lt;&#x2F;li&gt;
&lt;li&gt;dragging the edge of one&#x2F;multiple clips to change their lengths&lt;&#x2F;li&gt;
&lt;li&gt;dragging a handle on an audio clip to adjust the crossfade&lt;&#x2F;li&gt;
&lt;li&gt;adding&#x2F;removing nodes on an automation clip&lt;&#x2F;li&gt;
&lt;li&gt;using the lasso tool to select multiple nodes on an automation clip&lt;&#x2F;li&gt;
&lt;li&gt;dragging one&#x2F;multiple nodes on an automation clips (and snapping their positions to the grid unless Shift is held down)&lt;&#x2F;li&gt;
&lt;li&gt;adjusting the curvature between nodes on an automation clip&lt;&#x2F;li&gt;
&lt;li&gt;slicing a clip&lt;&#x2F;li&gt;
&lt;li&gt;copy&#x2F;pasting single&#x2F;multiple clips (and possibly on a different track)&lt;&#x2F;li&gt;
&lt;li&gt;duplicating clips (and making sure they are grid-aligned)&lt;&#x2F;li&gt;
&lt;li&gt;dragging one&#x2F;multiple clips up&#x2F;down to change the track they are on&lt;&#x2F;li&gt;
&lt;li&gt;reversing&#x2F;stretching&#x2F;pitch-shifting and audio clip&lt;&#x2F;li&gt;
&lt;li&gt;audio clips can have even more complicated maneuvers such as time stretching just a selected portion of a clip in order to correct the timing of a recorded performance&lt;&#x2F;li&gt;
&lt;li&gt;dragging an audio file&#x2F;automation clip&#x2F;MIDI clip from the browser onto the timeline&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Undo&#x2F;Redo logic can get complicated:
&lt;ul&gt;
&lt;li&gt;Like I mentioned above, there are a lot of operations that can be done with tracks, clips, MIDI notes, plugins, etc.&lt;&#x2F;li&gt;
&lt;li&gt;The undo&#x2F;redo operations need to perform as expected when manipulating multiple items at the same time. For example, if you select and bunch of clips and drag their positions, hitting the undo button should move back all of those clips at once and not one at a time.&lt;&#x2F;li&gt;
&lt;li&gt;Not all operations are undo-able, especially operations dealing with 3rd-party plugins since plugins are in charge of their own state, not the host.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;There are some more complexities when it comes to hosting 3rd-party plugin windows which I won&#x27;t get into here.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;my-views-on-the-rust-gui-landscape&quot;&gt;My views on the Rust GUI landscape&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=tKbV6BpH-C8&quot;&gt;This video&lt;&#x2F;a&gt; I watched recently brings up a good point about software development (Albeit the video is bit heavy-handed with its message and I might be taking the original message a bit out of context, but I think the point still stands). In the video, there is this chart:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;daw-frontend-development-struggles&#x2F;performance-velocity-adaptability.png&quot; alt=&quot;performance-velocity-adaptability chart&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here are what each each of the ends of the triangle mean:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&quot;Performance&quot; literally means how well the application performs.&lt;&#x2F;li&gt;
&lt;li&gt;&quot;Velocity&quot; means how fast an application gets developed. For example, did the app take a few weeks to develop, or several months?&lt;&#x2F;li&gt;
&lt;li&gt;&quot;Adaptability&quot; means how easily features can be changed&#x2F;added&#x2F;removed from the application in the future (another good word for this is &quot;maintainability&quot;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The idea of this chart is that you can&#x27;t have all three:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you focus too much on performance, it will take much longer to actually create the app and it will be harder to change&#x2F;add&#x2F;remove features in the future.&lt;&#x2F;li&gt;
&lt;li&gt;If you focus too much on adaptability, you are potentially over-engineering and over-abstracting your code architecture to the point where it both hurts performance and it eats into the time actually developing the app.&lt;&#x2F;li&gt;
&lt;li&gt;If you focus too much on velocity (as in taking a quick n&#x27; dirty path to get something out as fast as possible), not only will the application be unoptimized, but it will be harder to actually fix any problems you have in the future, possibly requiring you to rewrite the code later.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now this brings me to my current views on Rust GUI libraries (and other modern GUI libraries in general, not just Rust). It is my observation that modern GUI toolkits tend to focus too hard on the velocity&#x2F;adaptability end of the triangle and not the performance end.&lt;&#x2F;p&gt;
&lt;p&gt;Now I totally get why this is. Every developer wants to have a GUI library that is easy to use and gives results quickly. Every developer wants a GUI that is not a nightmare to maintain. And the clever architecture of Rust GUI libraries definitely delivers on those fronts (and at a level that has probably not been done before).&lt;&#x2F;p&gt;
&lt;p&gt;However, I think Rust GUI libraries seriously mistake and&#x2F;or neglect what it actually takes to have a GUI that has good performance when scaled up to a large project. Of course large and complicated GUIs may not be a target use-case for some or all of these libraries. My point is more to highlight why they won&#x27;t quite work for Meadowlark.&lt;&#x2F;p&gt;
&lt;p&gt;Now first I should mention that I am definitely aware of premature optimizations, and I am aware that I&#x27;m stressing a lot about performance before actually creating the GUI. However, that&#x27;s not what I&#x27;m worried about. What I&#x27;m worried about is the GUI library I end up using not even allowing me to do optimizations in the first place if I needed to (and I will very likely need to).&lt;&#x2F;p&gt;
&lt;p&gt;So to start, I should explain what it actually takes for a GUI to be &quot;high performance&quot;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-actually-makes-a-gui-high-performance&quot;&gt;What actually makes a GUI &quot;high performance&quot;?&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;rendering-performance&quot;&gt;Rendering performance&lt;&#x2F;h2&gt;
&lt;p&gt;The first aspect that makes a &quot;high performance&quot; GUI is quickly rendering the contents onto the screen. While this has definitely gotten easier in the modern age of GPU-acceleration, I don&#x27;t believe GPU-acceleration alone is a silver bullet:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The CPU still has to package all of the commands into a buffer to send to the GPU. If there are thousands of UI elements on the screen, that is a lot of commands for the CPU to package (especially when using OpenGL).&lt;&#x2F;li&gt;
&lt;li&gt;Text looks awful when rendered on the GPU. This is just due to the nature of how complex text rendering is. Best case is to have the CPU render each glyph into a texture atlas, and then have the GPU sample each glyph one at a time from this atlas. Even then, this approach has its footguns.&lt;&#x2F;li&gt;
&lt;li&gt;GPU power is not free. Having the GPU render all of those elements on all of those pixels every frame can chug a lot of battery. GPUs are more optimized for dealing with triangles and textures, and not so much for dealing with vector graphics. While consuming a lot of GPU power is fine for a video game, it&#x27;s not as fine when it&#x27;s an app meant to open for hours at a time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So I believe it&#x27;s still important to do what&#x27;s called &quot;damage tracking&quot;, where &lt;em&gt;only&lt;&#x2F;em&gt; the widgets that have changed get redrawn. This is usually done by clearing a rectangular region around a widget, filling the background back into that cleared region, and then redrawing the widget. Though this does definitely get complicated when the &quot;background&quot; is not a flat color, but is instead a hierarchy of other (possibly partially-transparent) widgets.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I also learned recently that damage tracking is not just an optimization on the application-level, but on the operating system level as well. Every OS has some sort of &quot;damage region&quot; concept built into the OS&#x27;s compositor system, which allows the OS to more efficiently blit small rectangles onto the final screen output instead of needing to blit the entire application&#x27;s window onto the final output. &lt;br&#x2F;&gt;&lt;br&#x2F;&gt; That being said, this OS-level optimization is probably not as necessary in the modern age since GPUs are pretty efficient at blitting large textures together.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;input-handling-performance&quot;&gt;Input handling performance&lt;&#x2F;h2&gt;
&lt;p&gt;The second aspect is efficiently handling input events. If a GUI library sends every mouse&#x2F;keyboard&#x2F;animation event to every widget, then that can get really expensive when there are a bunch of nodes in the widget tree.&lt;&#x2F;p&gt;
&lt;p&gt;Iterating a tree structure is not the most efficient to begin with. But there is a bigger problem called &quot;pointer chasing&quot;, which happens when you try to excessively dereference a bunch of pointers at once (in this case we dereference each node&#x2F;widget pointer in order to call its &lt;code&gt;on_event()&lt;&#x2F;code&gt; method).&lt;&#x2F;p&gt;
&lt;p&gt;A good first step is to only send events to the widgets that actually ask for it (although a lot of widgets want both mouse and keyboard input). Mouse input can be optimized by skipping all child nodes if the cursor isn&#x27;t contained within the bounds of the parent node (however, you then need a system to handle drag operations since those can happen outside the bounds of the widget being dragged).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update-handling-performance&quot;&gt;Update handling performance&lt;&#x2F;h2&gt;
&lt;p&gt;The third aspect is efficiently updating the widget tree. When an input event causes a widget to change, the GUI system needs to not only tell the rendering system that the widget has changed and it should be re-rendered, but it also needs to check if any other widgets have changed as a side effect. For example, if the width of a widget changed, that could cause the position of other widgets next to it to change.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;my-views-on-the-rust-gui-landscape-part-2&quot;&gt;My views on the Rust GUI landscape - Part 2&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In my experience, every Rust GUI library fails in one or more of those categories listed in the section above.&lt;&#x2F;p&gt;
&lt;p&gt;But I don&#x27;t believe this to be due to the developer&#x27;s lack of caring or lack of skill. I think this is an issue rooted in the very architecture that Rust GUI libraries tend to use.&lt;&#x2F;p&gt;
&lt;p&gt;I have found that Rust GUI library architectures (and a lot of modern GUI architectures in general, not just Rust) tend to fall into three categories.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-web-based-toolkits&quot;&gt;The web-based toolkits&lt;&#x2F;h2&gt;
&lt;p&gt;The first category is web-based GUI solutions such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;electron&#x2F;electron&quot;&gt;electron&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tauri-apps&#x2F;tauri&quot;&gt;tauri&lt;&#x2F;a&gt;. I understand why these solutions are so popular, it&#x27;s because they fall square into the &quot;velocity&quot; corner of the triangle. Do you know HTML&#x2F;CSS or have employees that do? Congratulations, you can create desktop apps!&lt;&#x2F;p&gt;
&lt;p&gt;However, it&#x27;s no secret that I&#x27;m quite against this industry trend of &quot;let&#x27;s use web tech for everything!&quot;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Both Javascript and the DOM are &lt;em&gt;slow&lt;&#x2F;em&gt;, there&#x27;s no changing that. Webassembly is definitely a good step forward, however that still doesn&#x27;t fix the DOM problem.&lt;&#x2F;li&gt;
&lt;li&gt;Web engines are also expensive in terms of memory. Not just RAM, but also in terms of file size (especially apps built with electron). I&#x27;m sure a lot of users are tired of every app having a minimum size of around 50-100MB.&lt;&#x2F;li&gt;
&lt;li&gt;Both Javascript and the DOM model make it harder to create maintainable codebases using things like abstractions (thus it&#x27;s not very &quot;adaptable&quot;). Again webassembly helps here, but the root problem is still there.&lt;&#x2F;li&gt;
&lt;li&gt;It takes resources away from the much-needed innovation in native GUI toolkits.&lt;&#x2F;li&gt;
&lt;li&gt;On a slightly political note, web tech is all but dominated by Chromium (and therefore Google). Using web tech for everything gives Google a lot more power over the software industry as a whole, and it should be obvious why this is potentially a bad thing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-immediate-mode-toolkits&quot;&gt;The immediate-mode toolkits&lt;&#x2F;h2&gt;
&lt;p&gt;The second category is immediate-mode GUI solutions such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&quot;&gt;egui&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ocornut&#x2F;imgui&quot;&gt;imgui&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;makepad&#x2F;makepad&quot;&gt;makepad&lt;&#x2F;a&gt;. This architecture is both very quick and easy to use, while also having a high degree of adaptability due to the fact that &quot;the GUI is a function of the data&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;However, this is definitely at the cost of performance. Whenever any part of the data changes, it reconstructs&#x2F;restyles&#x2F;relayouts the entire widget tree and redraws the entire screen widget-by-widget. While there can be some clever caching optimizations under the hood, the architecture is still flawed in this regard. This performance is not a problem if the app is small or the app already redraws every frame like a video game. But it is a problem when the GUI is as complicated as a DAW GUI.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-elm-based-toolkits&quot;&gt;The Elm-based toolkits&lt;&#x2F;h2&gt;
&lt;p&gt;An architecture that is very popular in the Rust ecosystem is the &lt;a href=&quot;https:&#x2F;&#x2F;dennisreimann.de&#x2F;articles&#x2F;elm-architecture-overview.html&quot;&gt;Elm architecture&lt;&#x2F;a&gt; (or some variation of the architecture). This is because it gets around the problem of shared mutability in Rust, while also having a very high degree of adaptability&#x2F;maintainability due to its data&#x2F;event-driven nature. GUI toolkits that use a variant of this architecture include &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iced-rs&#x2F;iced&quot;&gt;Iced&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vizia&#x2F;vizia&quot;&gt;Vizia&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linebender&#x2F;druid&quot;&gt;Druid&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;antoyo&#x2F;relm&quot;&gt;Relm&lt;&#x2F;a&gt;, and even Apple&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;xcode&#x2F;swiftui&#x2F;&quot;&gt;SwiftUI&lt;&#x2F;a&gt; to some extent.&lt;&#x2F;p&gt;
&lt;p&gt;However, the Elm architecture still has drawbacks in terms of performance. While performance is definitely better than immediate-mode (because they are what is called &quot;retained-mode&quot;), these kind of architectures still do a lot of work in order to detect changes to the state of the application. This is mainly to do with their data-driven nature. Because any part of the widget tree can depend on any part of the input data (this input data also includes things like layout and styling), the GUI library has to somehow check the entire input data and the entire widget tree for changes. Each library has a different method for doing this, with varying levels of performance.&lt;&#x2F;p&gt;
&lt;p&gt;Still, I should mention that the alternative to a data-driven approach is to have the user manually update the widget tree themselves. This is definitely more time consuming and more error-prone, so I understand why the industry is gravitating away from it. And I don&#x27;t dislike the concept. In theory it has the potential to have &quot;good enough&quot; performance at a large scale (of course the actual real-world performance is a different question).&lt;&#x2F;p&gt;
&lt;p&gt;However, there&#x27;s a much bigger problem with these Rust GUI libraries in particular, which is that none of them actually do any kind of damage tracking for rendering. They redraw the whole screen widget-by-widget every frame, relying heavily on GPU-acceleration in order to make performance not turn into a slideshow. (Although this situation might change for one library which I&#x27;ll get into later.)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;potential-plans-moving-forward&quot;&gt;Potential plans moving forward&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;So all this brings me to my current situation of figuring out the best path forward for Meadowlark. This is the part where I would like to hear your thoughts if you have any.&lt;&#x2F;p&gt;
&lt;p&gt;I think there are three main questions to answer here: Should I stick with Rust for Meadowlark&#x27;s frontend, what GUI library should I use, and what method is best to actually go about developing the frontend?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;should-i-stick-with-rust&quot;&gt;Should I stick with Rust?&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This first question is definitely a tough one. Meadowlark has been rooted in Rust since the beginning (even starting out as the &quot;Rusty DAW project&quot;).&lt;&#x2F;p&gt;
&lt;p&gt;However, from my experience I&#x27;m just not sure anymore that the Rust GUI ecosystem is quite there yet (or even that it will be &quot;there&quot; in a year or two). GUI is just so complicated that I&#x27;m not sure that passion-driven projects alone are enough to push it to the level of mature C++ libraries. And frankly, I find it harder to get motivated to work on Meadowlark when the underlying technology is unproven and experimental.&lt;&#x2F;p&gt;
&lt;p&gt;But on the flip side, maybe my concerns are unwarranted and Rust is still the best way to go? I don&#x27;t know. Either way, I&#x27;ll list the potential options there are for both Rust and C++ to get a better idea on answering this question:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;To be clear, with whatever path I choose, I still want to use Rust for the backend as much as possible (namely in my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;dropseed&quot;&gt;dropseed&lt;&#x2F;a&gt; engine). &lt;br&#x2F;&gt;&lt;br&#x2F;&gt; It is possible to use both C++ and Rust in the same project thanks to &lt;a href=&quot;https:&#x2F;&#x2F;cxx.rs&#x2F;&quot;&gt;cxx&lt;&#x2F;a&gt;. Of course it will make building more cumbersome, but it&#x27;s a tradeoff to consider.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;options-using-native-rust-libraries&quot;&gt;Options using native Rust libraries&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Here are the native-Rust options I think have any potential to fit my use case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vizia&quot;&gt;Vizia&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vizia&#x2F;vizia&quot;&gt;Vizia&lt;&#x2F;a&gt; for the latest attempt at Meadowlark&#x27;s GUI. It still has potential and I may still decide to stick with it, but I do have quite a few concerns with it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Creating the non-timeline portions of the GUI was a breeze with this library.&lt;&#x2F;li&gt;
&lt;li&gt;I am close with the developer on Discord, and he has expressed interest in adapting Vizia to cover the needs of Meadowlark.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Vizia&#x27;s performance is currently quite poor. It currently excessively iterates the widget tree to search for changes, and it redraws the whole screen on every change. While various optimizations are on the roadmap (including a form of damage-tracking), a part of me is still concerned with how well it will turn out in practice.&lt;&#x2F;li&gt;
&lt;li&gt;The data-binding system has proven to be a bit awkward when the application state is very complicated. In order to make it work, I need to create a &quot;GUI state&quot; that is separate from my source state, which means that I still need to manually keep this GUI state in sync with my source state. So for my use case, I&#x27;ve found there is not much benefit to the data-binding system over just being able to manually update the widget tree.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s declarative architecture makes it difficult to put wildly different widgets into a list. Namely a horizontal list of inline plugin GUIs on the horizontal FX rack.&lt;&#x2F;li&gt;
&lt;li&gt;There is currently a noticeable amount of input latency when using vsync. This could just be the nature of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;femtovg&#x2F;femtovg&quot;&gt;femtovg&lt;&#x2F;a&gt; or even just OpenGL in general, but it would be a bummer if it could never be fixed.&lt;&#x2F;li&gt;
&lt;li&gt;Vizia is still missing a lot of features I need such as multi-window support, custom shaders, global keyboard shortcuts, localization features, list factories for long lists of items, and pointer locking. Again, these are on the roadmap, but that leads me to my last concern:&lt;&#x2F;li&gt;
&lt;li&gt;Vizia is mainly worked on by just one person, and there is no funding behind it. It&#x27;s not that I doubt the developer&#x27;s abilities, but just that it&#x27;s a risk to consider for the longevity of the project.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;iced&quot;&gt;Iced&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iced-rs&#x2F;iced&quot;&gt;Iced&lt;&#x2F;a&gt; was actually my original gateway for getting into Rust in the first place. However, I have some serious doubts about its performance. It&#x27;s possible that performance can be improved in future updates to Iced, but it&#x27;s currently a gamble.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Iced is by far the most mature native Rust GUI library.&lt;&#x2F;li&gt;
&lt;li&gt;It gets financial backing from a few companies (albeit fairly small companies).&lt;&#x2F;li&gt;
&lt;li&gt;It recently got adoption by System76 who are also interested in accelerating its development.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;On every update cycle, Iced reconstructs an entire abstract representation of the widget tree, diffs it with the previous widget tree, and then applies the necessary updates. While Iced touts that constructing this abstract tree and diffing it &quot;should be cheap&quot;, I&#x27;m skeptical of how well it scales to a very large GUI.&lt;&#x2F;li&gt;
&lt;li&gt;Iced doesn&#x27;t use damage tracking for rendering. It&#x27;s possible this could change in the future, but again it&#x27;s a gamble.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s still missing a few key features such as proper multi-window support.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;custom-in-house-solution&quot;&gt;Custom in-house solution&lt;&#x2F;h2&gt;
&lt;p&gt;For a while I was working on a concept called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;firewheel&quot;&gt;Firewheel&lt;&#x2F;a&gt;. The main idea was that it&#x27;s a low-level GUI library where the user manually updates the widget tree, manually lays out the widgets (with a simple but powerful &quot;anchor&quot; system), and manually assigns widgets to layers to most optimally take advantage of render regions.&lt;&#x2F;p&gt;
&lt;p&gt;However, developing an in-house toolkit most definitely falls into the &quot;performance&quot; corner of the triangle chart.&lt;&#x2F;p&gt;
&lt;p&gt;But as a counter-argument, because it&#x27;s so low-level, maybe it won&#x27;t actually take &lt;em&gt;that&lt;&#x2F;em&gt; much time to complete? A custom solution would also have the advantage of being in full control of the feature set.&lt;&#x2F;p&gt;
&lt;p&gt;Then again, it could just be too much work. I&#x27;d like to hear other people&#x27;s opinions on this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;non-options&quot;&gt;Non-Options&lt;&#x2F;h2&gt;
&lt;p&gt;Here I&#x27;ll list other existing native Rust GUI libraries and why I&#x27;m not considering them.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linebender&#x2F;druid&quot;&gt;Druid&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;It&#x27;s no longer being updated and is in maintenance mode.&lt;&#x2F;li&gt;
&lt;li&gt;Its performance isn&#x27;t much better (or possibly even worse) than Iced.&lt;&#x2F;li&gt;
&lt;li&gt;It doesn&#x27;t use damage tracking for rendering.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;slint-ui&#x2F;slint&quot;&gt;slint&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;It prioritizes using declarative markup files to construct the GUI. While I &lt;em&gt;think&lt;&#x2F;em&gt; you can use it in a non-declarative way, I&#x27;m not sure how well this works in practice.&lt;&#x2F;li&gt;
&lt;li&gt;Its support for custom widgets is quite limited.&lt;&#x2F;li&gt;
&lt;li&gt;Desktop platform support is currently unfinished, and I&#x27;m not sure it will even end up supporting all the features I need.&lt;&#x2F;li&gt;
&lt;li&gt;Its GPU-based renderer currently doesn&#x27;t use damage tracking, only its CPU-based renderer does.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ocornut&#x2F;imgui&quot;&gt;imgui&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;immediate-mode&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;makepad&#x2F;makepad&quot;&gt;makepad&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;immediate-mode&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tauri-apps&#x2F;tauri&quot;&gt;tauri&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;web-based&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redox-os&#x2F;orbtk&quot;&gt;OrbTK&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;No longer maintained&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;options-using-rust-bindings&quot;&gt;Options using Rust bindings&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;There is only one I think has any potential to fit my use case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gtk&quot;&gt;GTK&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gtk-rs&#x2F;gtk4-rs&quot;&gt;gtk-rs&lt;&#x2F;a&gt; in a previous attempt at Meadowlark&#x27;s GUI. They are bindings to the &lt;a href=&quot;https:&#x2F;&#x2F;www.gtk.org&#x2F;&quot;&gt;GTK&lt;&#x2F;a&gt; GUI library which is written in C (and is used by a lot of Linux applications). But again I have some concerns with it:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There is already a DAW that uses GTK4 called &lt;a href=&quot;https:&#x2F;&#x2F;www.zrythm.org&#x2F;en&#x2F;index.html&quot;&gt;Zrythm&lt;&#x2F;a&gt; (albeit the developer uses C not Rust).
&lt;ul&gt;
&lt;li&gt;Ardour also uses GTK (although it&#x27;s a very old and heavily modified version of GTK2).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;It uses damage tracking for its rendering and is quite efficient even on complex GUIs.&lt;&#x2F;li&gt;
&lt;li&gt;GTK is battle-tested and has a lot of developers behind it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;THE BIGGEST deal breaker for me was that it doesn&#x27;t have a way for widgets to listen to relative mouse movements as opposed to absolute mouse coordinates. Currently if you are dragging a knob&#x2F;slider and the mouse hits the edge of the screen (or even outside a floating window), it will stop working. This might not be a problem for Zrythm since its only parameters are mixer tracks with large sliders, but for Meadowlark I want a horizontal FX rack like in Bitwig&#x2F;Ableton. Horizontal FX racks have a lot of knobs&#x2F;sliders near the bottom of the screen.
&lt;ul&gt;
&lt;li&gt;It seems like adding this feature to GTK would be difficult. I might be able to do it myself given enough time, but even then will those changes be accepted upstream? And even then I&#x27;ll have to wait for the Rust bindings to catch up.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;CSS styling is finicky.&lt;&#x2F;li&gt;
&lt;li&gt;Support for Windows&#x2F;Mac definitely takes a backseat to Linux support.
&lt;ul&gt;
&lt;li&gt;I&#x27;ve run into an issue where text on Windows is straight up messed up even in the default demo. It seems to be getting a fix, but still that&#x27;s several months after I posted the issue.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;m also just unsure about the direction that the Gnome team is taking with GTK as a whole (especially the whole controversy with libadwaita). This is a minor nitpick, but still.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Another potential solution I&#x27;ll throw out there is maybe we just don&#x27;t have knobs in Meadowlark, only sliders? It&#x27;s not ideal, but considering that relative mouse movement support is the only real deal breaker I have with GTK, maybe it&#x27;s an acceptable tradeoff?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;options-using-c&quot;&gt;Options using C++&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Unfortunately using Rust bindings to these are either nonexistent or are practically unusable due to the incompatible philosophies between Rust and C++. So this means I would need to write Meadowlark&#x27;s frontend in C++ if I go with one of these options.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fltk&quot;&gt;FLTK&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Very efficient.&lt;&#x2F;li&gt;
&lt;li&gt;Excellent support for custom OpenGL shaders.&lt;&#x2F;li&gt;
&lt;li&gt;The (possibly abandoned?) &lt;a href=&quot;http:&#x2F;&#x2F;non.tuxfamily.org&#x2F;&quot;&gt;Non DAW&lt;&#x2F;a&gt; project uses it (or at least a modified version of it).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I haven&#x27;t yet looked into if it actually has all the features I need. Still, it seems quite promising.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;juce&quot;&gt;JUCE&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It&#x27;s already touted as a GUI library for audio applications.&lt;&#x2F;li&gt;
&lt;li&gt;It also has a lot of other audio-related features such as connecting to system devices, meaning we wouldn&#x27;t need to develop our own solutions such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;rainout&quot;&gt;rainout&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;It also has features like loading audio files and streaming them from disk, meaning we wouldn&#x27;t need our own solutions such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;creek&quot;&gt;creek&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;pcm-loader&quot;&gt;pcm-loader&lt;&#x2F;a&gt; (although those two are already pretty much complete).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Its performance can be quite poor even for a CPU-rendered library. Still, it uses damage tracking, and there are workarounds to greatly improve performance in areas.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s owned by PACE Anti-Piracy Inc. ðŸ¤¢&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;qt&quot;&gt;QT&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No shortage of features.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Its signal architecture can lead to buggy and hard-to-maintain spaghetti code (there are some ways to make it more manageable though).&lt;&#x2F;li&gt;
&lt;li&gt;Its styling system is finicky. It could be tricky to support user-generated themes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;development-plan&quot;&gt;Development plan?&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The final question I want an answer to is what is the best way to go about actually developing Meadowlark&#x27;s frontend? By this I mean who actually does the work of developing it?&lt;&#x2F;p&gt;
&lt;p&gt;No matter what GUI library I choose, developing the frontend is going to take a lot of work due to how complex the logic is.&lt;&#x2F;p&gt;
&lt;p&gt;A part of me is starting to feel like maybe I&#x27;ve bitten off more than I can chew. If I were a company I would just hire a frontend developer, but Meadowlark is currently unfunded so I don&#x27;t have that luxury (well there&#x27;s a tiny bit of donations coming in, but definitely not enough to hire anyone).&lt;&#x2F;p&gt;
&lt;p&gt;Now this being an open source project, maybe I could leverage volunteers? However, I&#x27;m not sure how well volunteer-driven work will pan out considering just how complex the frontend is. I&#x27;m not sure any amount of drafting design documents (which also take quite a bit of work to create) would fix that issue. Ideally I would love if there was one or two people who could dedicated a large amount of time to the frontend. However, I haven&#x27;t found anyone who is able or willing to do this amount of work for free, and I of course don&#x27;t blame them for that.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;And if you are wondering how I am currently financially supporting myself, I am fortunate enough to have supportive parents to fall back on. I&#x27;m currently living at their house on a farm. &lt;br&#x2F;&gt;&lt;br&#x2F;&gt; I am using this opportunity to try and get Meadowlark off the ground before I start worrying about funding.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Another reason I brought up potentially using C++ is that developers (especially those with experience in the audio industry or the desktop GUI industry) are much harder to come by. If I go with a Rust library, not only will volunteers&#x2F;employees need to learn Rust, but also the experimental GUI library itself (and Rust GUI libraries tend to have some pretty foreign concepts).&lt;&#x2F;p&gt;
&lt;p&gt;But on the flip-side, maybe the frontend is something I can handle by myself? Maybe I&#x27;m just doubting my own abilities too much? I&#x27;m not sure. In the end I just want to make sure that I&#x27;m allocating my time and resources wisely.&lt;&#x2F;p&gt;
&lt;p&gt;Still, if I do this solo, I think creating some design documents is probably a good idea just to help wrap my head around the complexity.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;After writing this, I&#x27;m now kind-of leaning towards the idea of using the Rust bindings to GTK and only having sliders in Meadowlark. It&#x27;s probably possible to do what Tracktion Waveform does for some of its sliders, which is to show a large pop-up slider when dragging a small slider in order to save space while still allowing for a large degree of control.&lt;&#x2F;p&gt;
&lt;p&gt;But of course I would like to hear any thoughts and ideas you may have. I am most active in my &lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;2W3Xvc8wy4&quot;&gt;Discord server&lt;&#x2F;a&gt; if you are interested in discussion.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Accurate Timekeeping in a DAW</title>
        <published>2022-11-21T00:00:00+00:00</published>
        <updated>2022-11-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/time-keeping/"/>
        <id>https://billydm.github.io/blog/time-keeping/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/time-keeping/">&lt;p&gt;Among the many things a DAW needs to do, keeping track of when events (i.e. midi notes, automation nodes, the start and end of audio clips, etc.) should occur is one of them. I want to share the solution I&#x27;ve come up with for my DAW engine. It was partly inspired by &lt;a href=&quot;https:&#x2F;&#x2F;ardour.org&#x2F;timing.html&quot;&gt;this article&lt;&#x2F;a&gt; by the Ardour team, as well as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ardour&#x2F;ardour&#x2F;tree&#x2F;master&#x2F;libs&#x2F;temporal&quot;&gt;their source code&lt;&#x2F;a&gt; if you want some further reading.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In short, the problem is that there isn&#x27;t just one type of time we&#x27;re dealing with. There are actually four distinct &quot;time domains&quot;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Musical Time - Time measured in musical units such as beats and measures. This is the time domain that sheet music deals with, and is what the user usually thinks of when they compose music.&lt;&#x2F;li&gt;
&lt;li&gt;Sample Time - Time measured in the number of samples (for a single channel of audio). This time domain is usually used for audio clips and when the user is editing a project in a non-musical context (i.e. editing a podcast or writing a movie score). This time domain is also used by your sound card and audio plugins.&lt;&#x2F;li&gt;
&lt;li&gt;&quot;Real Time&quot; (Seconds) - Time measured in seconds. This time domain is used more as an intermediate step for conversions (as well as a visual aid for the user) than it is used as an actual format to store events in.&lt;&#x2F;li&gt;
&lt;li&gt;Pixels - Okay, this one might be a bit of a stretch. But it still stands that we need to convert whatever time format we use into the actual pixel position to draw something on the screen.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#x27;ve actually discovered a fifth time domain which I probably need to add support for eventually, which is timecodes in video formats. These are usually in units of frames, and framerates differs depending on the video format.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now the equations to convert between these time domains may seem pretty simple on first inspection, for example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MusicalBeats = Seconds * BPM &#x2F; 60.0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Seconds = SampleTime &#x2F; SampleRate&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Pixels = MusicalBeats * PixelsPerBeat * ZoomFactor&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But things become immediately harder once you want to support automated tempo in a project. Now we&#x27;re no longer dealing with simple ratios, we are now dealing with a complicated piece-wise function.&lt;&#x2F;p&gt;
&lt;p&gt;Although if that was the only problem, then I wouldn&#x27;t be writing this article. There is bigger hidden problem, which is that ratio calculations on computers are imprecise due to the nature of floating point numbers. If you go willy-nilly with how you store time data and constantly convert back-and forth between time domains, things can start to get out of sync. Not only that, but depending on the time domain you originally stored the information in, if you change the tempo or the sample rate of the project, your events can now be occurring at slightly different times. If you try to change it back, it still may not be the original value we started with, and thus we have lost information.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;part-1-the-source-of-truth&quot;&gt;Part 1: The &quot;Source of Truth&quot;&lt;&#x2F;h2&gt;
&lt;p&gt;The first part of the solution is to define what your &quot;source of truth&quot; is. By this I mean that all conversions should be performed from the &quot;source of truth&quot; time domain to whatever time domain we need, and never the other way around (whenever possible).&lt;&#x2F;p&gt;
&lt;p&gt;In a DAW, there are generally two sources of truth being used: musical time and sample time.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;musical-time&quot;&gt;Musical Time&lt;&#x2F;h3&gt;
&lt;p&gt;For the majority of events in a DAW, musical time is the best source of truth. This is because the information stored in musical time is independent of both tempo and sample rate, so we won&#x27;t lose any information when changing the BPM or sample rate.&lt;&#x2F;p&gt;
&lt;p&gt;If we want to support events with sample-accurate precision, we can still use musical time as long as our format has enough precision.&lt;&#x2F;p&gt;
&lt;p&gt;For example, these types of events will be stored in musical time:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The start and end positions of piano roll (MIDI) notes in a piano roll clip.&lt;&#x2F;li&gt;
&lt;li&gt;The position of automation nodes in an automation clip.&lt;&#x2F;li&gt;
&lt;li&gt;The start and end positions of piano roll clips and automation clips on the timeline.&lt;&#x2F;li&gt;
&lt;li&gt;The start position of audio clips on the timeline.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sample-time&quot;&gt;Sample Time&lt;&#x2F;h3&gt;
&lt;p&gt;This is the best format to use when dealing with audio clips. This is because these types of events deal with actual samples in the audio clip, and so unlike musical time these events &lt;em&gt;are&lt;&#x2F;em&gt; dependent on the sample rate and the tempo. For example, you don&#x27;t want a change in the tempo to change the sample on which the event occurs.&lt;&#x2F;p&gt;
&lt;p&gt;This format is also more reliable when editing in a non-musical context (i.e. editing podcasts or editing the sound of a video), so in those cases certain timeline events should be stored in sample time instead.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It would actually be better to use video timecodes as the source of truth while editing the sound of videos, so that&#x27;ll be a third one I&#x27;ll add to my code later.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;part-2-the-actual-format&quot;&gt;Part 2: The Actual Format&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we&#x27;ve decided our sources of truth, what format should we use to actually store them? If we used floats, we would run into the same imprecision errors we mentioned above. So my solution uses fixed point. But not just any fixed point, fixed point with a specific modulus.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;musical-time-1&quot;&gt;Musical Time&lt;&#x2F;h3&gt;
&lt;p&gt;Musical Time is stored in units of musical beats, where the fractional part uses a modulus of &lt;code&gt;1,476,034,560&lt;&#x2F;code&gt; (In other words, one unit in the fractional part is equal to exactly &lt;code&gt;1 &#x2F; 1,476,034,560&lt;&#x2F;code&gt; of a musical beat).&lt;&#x2F;p&gt;
&lt;p&gt;Why &lt;code&gt;1,476,034,560&lt;&#x2F;code&gt;? Because it&#x27;s the least common multiple of &lt;code&gt;2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 24, 32, 64, 128, 256, 512, 1,024, 2,048, 4,096, 8,192, 16,384, and 32,768&lt;&#x2F;code&gt;. This allows us to create those subdivisions of musical beats with &lt;em&gt;exact&lt;&#x2F;em&gt; precision. For example, because it&#x27;s a multiple of 3, we can represent a triplet (&lt;code&gt;1&#x2F;3&lt;&#x2F;code&gt;) as exactly &lt;code&gt;1,476,034,560 &#x2F; 3 = 492,011,520&lt;&#x2F;code&gt;, as apposed to the infinitely repeating digits that occur in both decimal and binary.&lt;&#x2F;p&gt;
&lt;p&gt;Using a fixed point modulus is not a new concept in the audio world, in fact MIDI devices have been using &lt;code&gt;1920&lt;&#x2F;code&gt; as their modulus since the early days. This number neatly covers half-notes, triplets, quarter-notes, 5th-notes (whatever those are called), 6th-notes, eight-notes, 10th-notes, 12th-notes, 15th-notes, 16th-notes, 32nd-notes, 64th-notes, and 128th-notes (and some others).&lt;&#x2F;p&gt;
&lt;p&gt;My number goes further by also covering 7th-notes, 9th-notes, 11th-notes, 13th-notes, 14th-notes, 256th-notes, 512th-notes, 1,024th-notes, 2,048th-notes, 4,096th-notes, 8,192th-notes, 16,284th-notes and 32,768th-notes.&lt;&#x2F;p&gt;
&lt;p&gt;But more importantly my number is much larger than all the common sample rates (&lt;code&gt;22,050, 24,000, 44,100, 48,000, 88,200, 96,000, 176,400, 192,000, 352,800, and 384,000&lt;&#x2F;code&gt;). This ensures that we have enough precision for sample-accurate events, even at very high sample rates and at very low BPMs.&lt;&#x2F;p&gt;
&lt;p&gt;Also this number is just under the 32-bit limit of &lt;code&gt;4,294,967,296&lt;&#x2F;code&gt;, allowing us to make the most use of the 32-bit unsigned integer we use for the fractional part of our format, while also giving us a little bit of buffer room to avoid overflow when adding fractional parts together.&lt;&#x2F;p&gt;
&lt;p&gt;Now that leaves us with another 32-bit unsigned integer for the non-fractional part. This gives us a maximum project length of &lt;code&gt;4,294,967,296&lt;&#x2F;code&gt; musical beats. Even at a ludicrous tempo of 300 BPM, that still gives us a maximum time of &lt;code&gt;9,942&lt;&#x2F;code&gt; days. So nothing to worry about. (And for you speedcore fans, that&#x27;s still 29.8 days at 100,000 BPM).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note, I opted for unsigned integers instead of signed ones because fixed-point becomes far more complicated when negatives are involved. For pre-rolls, I&#x27;m just going to offset the start of the song.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here is my implementation of &lt;code&gt;MusicalTime&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;meadowlark-core-types&#x2F;blob&#x2F;main&#x2F;src&#x2F;time&#x2F;musical_time.rs&quot;&gt;in code&lt;&#x2F;a&gt;. Note I&#x27;m calling this special fraction of a beat a &lt;code&gt;Tick&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;superclock-time&quot;&gt;Superclock Time&lt;&#x2F;h3&gt;
&lt;p&gt;For sample time I&#x27;m doing something similar, but with a modulus of &lt;code&gt;282,240,000&lt;&#x2F;code&gt; (In other words, one unit in the fractional part is equal to exactly &lt;code&gt;1 &#x2F; 282,240,000&lt;&#x2F;code&gt; of a second). This number is divisible by all the common sample rates &lt;code&gt;22,050, 24,000, 44,100, 48,000, 88,200, 96,000, 176,400, 192,000, 352,800, and 384,000&lt;&#x2F;code&gt;. This allows us to change the sample rate without losing any information.&lt;&#x2F;p&gt;
&lt;p&gt;I also chose this modulus because it&#x27;s also the number that Ardour uses, so perhaps that could lead to better compatibility between Meadowlark and Ardour project files.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m calling this special format &lt;code&gt;SuperclockTime&lt;&#x2F;code&gt; to avoid confusion with normal sample time.&lt;&#x2F;p&gt;
&lt;p&gt;Here is my implementation of &lt;code&gt;SuperclockTime&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MeadowlarkDAW&#x2F;meadowlark-core-types&#x2F;blob&#x2F;main&#x2F;src&#x2F;time&#x2F;superclock_time.rs&quot;&gt;in code&lt;&#x2F;a&gt;. Note I&#x27;m also calling this special fraction of a second a &lt;code&gt;Tick&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;part-3-the-tempo-map&quot;&gt;Part 3: The Tempo Map&lt;&#x2F;h2&gt;
&lt;p&gt;Now we need to handle automated tempo. This requires a piece-wise function where each section between automation nodes is a segment in this function. In my code, I&#x27;m calling the struct that stores the automation information for the project tempo and which does all the calculations the &lt;code&gt;TempoMap&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I would give more details on how this will actually work in practice, but I haven&#x27;t actually implemented it yet. I just know that it &lt;em&gt;should&lt;&#x2F;em&gt; be possible, and right now I&#x27;m focused on just getting a DAW with static tempo working before focusing on adding support for automated tempo. The &lt;code&gt;TempoMap&lt;&#x2F;code&gt; is there in my code, but right now it&#x27;s just a placeholder that simply uses static tempo. However, I do know that the final implementation will probably employ some kind of binary search or binary tree to help speed up calculations. Once I have implemented it I might make an article about it.&lt;&#x2F;p&gt;
&lt;p&gt;What I can say is how this tempo map will be used by the rest of my code. Every time the tempo map is changed (i.e. when the user changes the static tempo or adds&#x2F;removes&#x2F;moves and automation node in the tempo automation lane), the tempo map converts every single event in the project from our special format to its corresponding time in samples, and then it sends the result to the audio thread.&lt;&#x2F;p&gt;
&lt;p&gt;While not the most efficient way to do things, it is the easiest and least error-prone. Doing it this way also follows our &quot;source of truth&quot; philosophy where conversions only ever happen from the source of truth formats to the other formats. Plus, changing the BPM in a project is a fairly rare operation in the full production lifecycle, so I don&#x27;t think having performance possibly chug a little bit while moving a node in the tempo automation lane is a real problem.&lt;&#x2F;p&gt;
&lt;p&gt;Oh yeah, not only am I planning on supporting automated tempo with this tempo map, but also various groove and swing parameters. (Jazz, GlitchHop, and Electro Swing fans rejoice!)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>My Suite of Audio Plugins</title>
        <published>2022-06-29T00:00:00+00:00</published>
        <updated>2022-06-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/audio-plugin-suite/"/>
        <id>https://billydm.github.io/blog/audio-plugin-suite/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/audio-plugin-suite/">&lt;p&gt;For fun I will share my current setup of all the (mostly free) audio plugins&#x2F;software I personally use. You can use this list a guide if you are looking to build up your own arsenal.&lt;&#x2F;p&gt;
&lt;p&gt;I also believe in not giving yourself too many options. I try to have just one or two plugins for a specific task. Note my focus is on electronic music (DnB, Breakbeat, House, etc), so these plugins may not be the best choice for other types of genres.&lt;&#x2F;p&gt;
&lt;p&gt;Also note that I only use paid plugins&#x2F;software that have unintrusive DRM. Namely the majority of paid software I still use is from &lt;a href=&quot;https:&#x2F;&#x2F;u-he.com&#x2F;&quot;&gt;u-he&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Each section I will list a specific use case, and the plugins I use for that use case.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;mixing-mastering-fx&quot;&gt;Mixing &amp;amp; Mastering FX&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;colorful-compressors&quot;&gt;&quot;Colorful&quot; Compressors&lt;&#x2F;h2&gt;
&lt;p&gt;These are the compressors I reach for when I want to compress a single instrument to give it more &quot;color&quot;&#x2F;&quot;beefiness&quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;airwindows-pressure4-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.airwindows.com&#x2F;&quot;&gt;Airwindows Pressure4&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;Awesome for fattening up individual drum samples and stuff. There is no GUI, but there are so few controls that I don&#x27;t find it a problem.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tdr-molotok-free&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tokyodawn.net&#x2F;tokyo-dawn-labs&#x2F;&quot;&gt;TDR Molotok&lt;&#x2F;a&gt; (FREE)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;molotok.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Another nice colorful compressor. It also has a paid version with more features called &lt;code&gt;TDR Molot GE&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The plugin is available natively for Mac and Windows. Unfortunately it doesn&#x27;t have a native Linux binary, but it does run flawlessly under &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbert-vdh&#x2F;yabridge&quot;&gt;yabridge&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;clean-compressors&quot;&gt;Clean Compressors&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;These are the compressors I use when I want to do clean and transparent compression on instruments.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tdr-kotelnikov-free&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tokyodawn.net&#x2F;tokyo-dawn-labs&#x2F;&quot;&gt;TDR Kotelnikov&lt;&#x2F;a&gt; (FREE)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;kotelnikov.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It also has a paid version with more features called &lt;code&gt;TDR Kotelnikov GE&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The plugin is available natively for Mac and Windows. Unfortunately it doesn&#x27;t have a native Linux binary, but it does run flawlessly under &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbert-vdh&#x2F;yabridge&quot;&gt;yabridge&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;x42-compressor-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;x42-plugins.com&#x2F;x42&#x2F;x42-compressor&quot;&gt;x42 Compressor&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;darc.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;An easy to use &quot;bread-and-butter&quot; compressor with a nice sound.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bus-compressors&quot;&gt;Bus Compressors&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;These are the compressors I use for &quot;gluing&quot; multiple tracks together, including sometimes on the master track.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;presswerk-paid&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;u-he.com&#x2F;products&#x2F;presswerk&#x2F;&quot;&gt;Presswerk&lt;&#x2F;a&gt; (Paid)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;presswerk.jpg&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;An incredible sounding bus compressor with an analogue sound.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tdr-kotelnikov-again-free&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tokyodawn.net&#x2F;tokyo-dawn-labs&#x2F;&quot;&gt;TDR Kotelnikov&lt;&#x2F;a&gt; (again) (FREE)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;kotelnikov.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is also great as a bus compressor. It has a cleaner, more transparent sound than Presswerk.&lt;&#x2F;p&gt;
&lt;p&gt;It also has a paid version with more features called &lt;code&gt;TDR Kotelnikov GE&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The plugin is available natively for Mac and Windows. Unfortunately it doesn&#x27;t have a native Linux binary, but it does run flawlessly under &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbert-vdh&#x2F;yabridge&quot;&gt;yabridge&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;multiband-compressors&quot;&gt;Multiband Compressors&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;These are the compressors I use for increasing the loudness of instruments or as a mastering compressor.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zamulticompx2-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zamaudio.com&#x2F;&quot;&gt;ZaMultiCompX2&lt;&#x2F;a&gt; (Open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;zamulticompx2.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This one works well as a mastering compressor.&lt;&#x2F;p&gt;
&lt;p&gt;Note though while this plugin is open source, it is only free if you build the plugins yourself from source (or use Linux). Otherwise it&#x27;s $25 USD for the full suite of Zam&#x27;s plugins.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ott-free&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.kvraudio.com&#x2F;product&#x2F;ott-by-xfer-records&quot;&gt;OTT&lt;&#x2F;a&gt; (Free)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;ott.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This kind-of goes without saying. This is pretty much a staple in every electronic music producer&#x27;s toolbox.&lt;&#x2F;p&gt;
&lt;p&gt;The plugin is available natively for Mac and Windows. Unfortunately it doesn&#x27;t have a native Linux binary, but it does run under &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbert-vdh&#x2F;yabridge&quot;&gt;yabridge&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dynamic-eqs&quot;&gt;Dynamic EQs&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I use these when I want to tame a frequency in a sound, but I still want that frequency to come through at times. Dynamic EQs also work as a de-esser for both vocals and hi-hats.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tdr-nova-free&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tokyodawn.net&#x2F;tokyo-dawn-labs&#x2F;&quot;&gt;TDR Nova&lt;&#x2F;a&gt; (FREE)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;nova.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It also has a paid version with more features called &lt;code&gt;TDR Nova GE&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The plugin is available natively for Mac and Windows. Unfortunately it doesn&#x27;t have a native Linux binary, but it does run flawlessly under &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbert-vdh&#x2F;yabridge&quot;&gt;yabridge&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zamdynamiceq-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zamaudio.com&#x2F;&quot;&gt;ZamDynamicEQ&lt;&#x2F;a&gt; (Open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;zamdynamiceq.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note though while this plugin is open source, it is only free if you build the plugins yourself from source (or use Linux). Otherwise it&#x27;s $25 USD for the full suite of Zam&#x27;s plugins.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;colorful-eq&quot;&gt;&quot;Colorful&quot; EQ&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I use this when I want to boost a certain frequency while giving the sound a bit more &quot;character&quot; around that frequency. This is especially useful when boosting the high-end on stuff to increase brightness or boosting the mid-range on pads to increase warmth.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tdr-vos-slickeq-free&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tokyodawn.net&#x2F;tokyo-dawn-labs&#x2F;&quot;&gt;TDR VOS SlickEQ&lt;&#x2F;a&gt; (FREE)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;slickeq.jpg&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It also has two paid versions with more features called &lt;code&gt;TDR VOS SlickEQ GE&lt;&#x2F;code&gt; and &lt;code&gt;TDR VOS SlickEQ Mastering&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The plugin is available natively for Mac and Windows. Unfortunately it doesn&#x27;t have a native Linux binary, but it does run flawlessly under &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbert-vdh&#x2F;yabridge&quot;&gt;yabridge&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;limiters&quot;&gt;Limiters&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I use these for taming the peaks on transient material such as drums and plucked sounds, as well as for mastering.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;limiter-no6-free&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.kvraudio.com&#x2F;product&#x2F;limiter-no6-by-vladg-sound&quot;&gt;Limiter No6&lt;&#x2F;a&gt; (Free)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;limiter6.jpg&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A very versatile limiter. Great for mastering.&lt;&#x2F;p&gt;
&lt;p&gt;Tokyo Dawn has also made a paid version of this plugin with more features called &lt;code&gt;TDR Limiter 6 GE&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The plugin is available natively for Mac and Windows. Unfortunately it doesn&#x27;t have a native Linux binary, but it does run flawlessly under &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbert-vdh&#x2F;yabridge&quot;&gt;yabridge&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zamaximx2-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zamaudio.com&#x2F;&quot;&gt;ZaMaximX2&lt;&#x2F;a&gt; (Open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;zamaximx2.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A nice sounding and easy to use &quot;bread-and-butter&quot; limiter.&lt;&#x2F;p&gt;
&lt;p&gt;Note though while this plugin is open source, it is only free if you build the plugins yourself from source (or use Linux). Otherwise it&#x27;s $25 USD for the full suite of Zam&#x27;s plugins.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parametric-eq&quot;&gt;Parametric EQ&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;While I generally just use the parametric EQ built-in to my DAW, if I were to recommend a good free EQ plugin, it would be this one:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;x42-eq-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;x42-plugins.com&#x2F;x42&#x2F;x42-eq&quot;&gt;x42 EQ&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;fil4.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gate&quot;&gt;Gate&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Just a standard &quot;bread-and-butter&quot; gate plugin. This doesn&#x27;t need to be too fancy imo, especially if you are making electronic music.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zamgatex2-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zamaudio.com&#x2F;&quot;&gt;ZamGateX2&lt;&#x2F;a&gt; (Open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;zamgatex2.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note though while this plugin is open source, it is only free if you build the plugins yourself from source (or use Linux). Otherwise it&#x27;s $25 USD for the full suite of Zam&#x27;s plugins.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;distortion-saturation-plugins&quot;&gt;Distortion&#x2F;Saturation Plugins&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;wolf-shaper-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wolf-plugins.github.io&#x2F;wolf-shaper&#x2F;&quot;&gt;Wolf Shaper&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;wolf-shaper.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A great and versatile &quot;bread-and-butter&quot; waveshaper.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;airwindows-totape5-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.airwindows.com&#x2F;&quot;&gt;Airwindows ToTape5&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;Awesome tape saturation plugin. There is no GUI, but there are so few controls that I don&#x27;t find it a problem.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reverbs&quot;&gt;Reverbs&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;room-reverb-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.elephantdsp.com&#x2F;products&#x2F;room-reverb&#x2F;&quot;&gt;Room Reverb&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;room-reverb.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A nice-sounding a versatile &quot;bread-and-butter&quot; reverb.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aether-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dougal-s.github.io&#x2F;Aether&#x2F;&quot;&gt;Aether&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;aether.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;An incredible sounding &quot;shimmering&quot; reverb. This plugin is based on the open-source reverb &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ValdemarOrn&#x2F;CloudSeed&quot;&gt;Cloudseed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is only available on Linux (although you can in theory build it from source yourself for other platforms). If you are on Windows, you can use the aforementioned &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ValdemarOrn&#x2F;CloudSeed&quot;&gt;Cloudseed&lt;&#x2F;a&gt; plugin instead.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tal-reverb-2-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tal-software.com&#x2F;products&#x2F;tal-reverb&quot;&gt;TAL-Reverb-2&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;tal-reverb-2.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A nice sounding plate reverb.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;delay&quot;&gt;Delay&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;tal-dub-3-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tal-software.com&#x2F;products&#x2F;tal-dub&quot;&gt;TAL-Dub-3&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;tal-dub-3.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A nice sounding delay plugin.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chorus&quot;&gt;Chorus&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;tal-chorus-lx-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tal-software.com&#x2F;products&#x2F;tal-chorus-lx&quot;&gt;TAL-Chorus-LX&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;tal-chorus-lx.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A great-sounding chorus plugin. Useful as a stereo-widening effect.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;synths&quot;&gt;Synths&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;vital-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vital.audio&#x2F;&quot;&gt;Vital&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;vital.jpg&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;An incredibly powerful and industry-shattering synthesizer.&lt;&#x2F;p&gt;
&lt;p&gt;It is available for free, although the paid versions come with additional wavetables and presets.&lt;&#x2F;p&gt;
&lt;p&gt;I personally use the GPLv3-licensed fork called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DISTRHO&#x2F;DISTRHO-Ports&#x2F;tree&#x2F;master&#x2F;ports-juce6&#x2F;vitalium&quot;&gt;Vitalium&lt;&#x2F;a&gt; (must be built from source).&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;surge-xt-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;surge-synthesizer.github.io&#x2F;&quot;&gt;Surge XT&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;surge-xt.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A very versatile subtractive synth with an active community around it.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve personally been trying to use this one more often since it is so open-source friendly. (Although the UX could use an overhaul IMO. I may make my own fork with an overhauled UX someday.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zebra2-paid&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;u-he.com&#x2F;products&#x2F;zebra2&#x2F;&quot;&gt;Zebra2&lt;&#x2F;a&gt; (Paid)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;zebra2.jpg&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A very versatile modular synth. It is especially great for pad&#x2F;atmosphere sounds. There also exists thousands of great free presets you can scavenge around for.&lt;&#x2F;p&gt;
&lt;p&gt;There is also a free version of this plugin called &lt;a href=&quot;https:&#x2F;&#x2F;u-he.com&#x2F;products&#x2F;zebralette&#x2F;&quot;&gt;Zebralette&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hive-2-paid&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;u-he.com&#x2F;products&#x2F;hive&#x2F;&quot;&gt;Hive 2&lt;&#x2F;a&gt; (Paid)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;hive2.jpg&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A fantastic &quot;bread-and-butter&quot; synth with a very fast and streamlined UX.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;samplers&quot;&gt;Samplers&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;carla-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kx.studio&#x2F;Applications:Carla&quot;&gt;Carla&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;carla.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;While this plugin has a lot more features, I mainly just use it as a soundfount (SF2) player.&lt;&#x2F;p&gt;
&lt;p&gt;(Note while Carla &lt;em&gt;can&lt;&#x2F;em&gt; play SFZ files, it doesn&#x27;t always play them correctly. (It doesn&#x27;t loop the samples for example.))&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sforzando-free&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.plogue.com&#x2F;products&#x2F;sforzando.html&quot;&gt;Sforzando&lt;&#x2F;a&gt; (FREE)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;sforzando.jpg&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A powerful sampler that plays the open-source SFZ multi-sample format.&lt;&#x2F;p&gt;
&lt;p&gt;Although I have tried other open-source SFZ sampler plugins, this is the only one I found to be stable.&lt;&#x2F;p&gt;
&lt;p&gt;The plugin is available natively for Mac and Windows. Unfortunately it doesn&#x27;t have a native Linux binary, but it does run flawlessly under &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robbert-vdh&#x2F;yabridge&quot;&gt;yabridge&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;analyzers&quot;&gt;Analyzers&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;spectrum-analyzer&quot;&gt;Spectrum Analyzer&lt;&#x2F;h2&gt;
&lt;p&gt;I personally prefer spectrum analyzers that use color to signify loudness of a given frequency. I feel that the standard &quot;line graph&quot; model of spectrum analyzer can give a false impression of how humans actually hear the loudness of the given frequencies.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wolf-spectrum-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wolf-plugins&#x2F;wolf-spectrum&quot;&gt;Wolf Spectrum&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;wolf-spectrum.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;loudness-meter&quot;&gt;Loudness Meter&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Useful to monitor loudness while reference mixing&#x2F;mastering.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lufs-meter-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klangfreund&#x2F;LUFSMeter&quot;&gt;LUFS Meter&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;lufs-meter.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available for Linux only. However, there is a paid version of this plugin called &lt;a href=&quot;https:&#x2F;&#x2F;www.klangfreund.com&#x2F;lufsmeter&#x2F;&quot;&gt;LUFS Meter 2&lt;&#x2F;a&gt; that is available on all platforms.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;goniometer&quot;&gt;Goniometer&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Useful to monitor the stereo phase correlation of your track to make sure it will still sound good when played in mono.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lufs-meter-free-and-open-source-1&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klangfreund&#x2F;LUFSMeter&quot;&gt;LUFS Meter&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;easyssp.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux and Windows.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;other&quot;&gt;Other&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;bitwig-studio-paid&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.bitwig.com&#x2F;&quot;&gt;Bitwig Studio&lt;&#x2F;a&gt; (Paid)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;bitwig-studio.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Bitwig is the DAW I&#x27;m currently using at the time of this writing, solely because it&#x27;s by far the best experience for creating music on Linux right now (emphasis on &quot;for now&quot; &lt;em&gt;wink wink&lt;&#x2F;em&gt;). I hardly ever use the built-in plugins aside from the multi-band splitter and the EQ.&lt;&#x2F;p&gt;
&lt;p&gt;This program is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;paulxstretch-free-and-open-source&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sonosaurus.com&#x2F;paulxstretch&#x2F;&quot;&gt;PaulXStretch&lt;&#x2F;a&gt; (FREE and open source)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;audio-plugin-suite&#x2F;paulxstretch.png&quot; alt=&quot;screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;An cool plugin that can stretch samples an absurd amount, to the point where they become usable pad and atmosphere samples.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is available natively for Linux, Mac, and Windows.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Safe (and Fast) Audio Buffer API in Rust</title>
        <published>2022-03-31T00:00:00+00:00</published>
        <updated>2022-03-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/audio-buffer-api/"/>
        <id>https://billydm.github.io/blog/audio-buffer-api/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/audio-buffer-api/">&lt;blockquote&gt;
&lt;p&gt;UPDATE: I&#x27;m not really happy with this article anymore. I&#x27;ve ended up not actually using this code, and there are many things I would change about it today (including removing the unsafe). I may update this at some point, but I&#x27;m busy with other things right now.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;While writing my DAW engine in Rust, I&#x27;ve came across a very Rust-specific problem when it comes to audio buffers for plugins.&lt;&#x2F;p&gt;
&lt;p&gt;I plan on having first-class support for the awesome new open-source &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;free-audio&#x2F;clap&quot;&gt;CLAP&lt;&#x2F;a&gt; plugin spec (although this problem isn&#x27;t specific to that spec). In it, the host sends the audio buffers to the plugin in a couple of small and tidy structs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; C
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; clap_process {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Audio buffers, they must have the same count as specified
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; by clap_plugin_audio_ports-&amp;gt;get_count().
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; The index maps to clap_plugin_audio_ports-&amp;gt;get_info().
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; If a plugin does not implement clap_plugin_audio_ports,
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; then it gets a default stereo input and output.
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; clap_audio_buffer_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;audio_inputs;
&lt;&#x2F;span&gt;&lt;span&gt;   clap_audio_buffer_t       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;audio_outputs;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span&gt;                   audio_inputs_count;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span&gt;                   audio_outputs_count;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;clap_process_t&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; clap_audio_buffer {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Either data32 or data64 pointer will be set.
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;float  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;data32;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;data64;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span&gt; channel_count;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span&gt; latency;       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; latency from&#x2F;to the audio interface
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint64_t&lt;&#x2F;span&gt;&lt;span&gt; constant_mask; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; mask &amp;amp; (1 &amp;lt;&amp;lt; N) to test if channel N is
&lt;&#x2F;span&gt;&lt;span&gt;                           &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; constant
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;clap_audio_buffer_t&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All fine and dandy, but a couple conundrums arise with the how the plugin is allowed to define what buffers it wants for each of its audio ports:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; C
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This port is the main audio input or output.
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; There can be only one main input and main output.
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Main port must be at index 0.
&lt;&#x2F;span&gt;&lt;span&gt;   CLAP_AUDIO_PORT_IS_MAIN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; The prefers 64 bits audio with this port.
&lt;&#x2F;span&gt;&lt;span&gt;   CLAP_AUDIO_PORTS_PREFERS_64BITS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; &amp;lt;----------------- 1
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; clap_audio_port_info {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span&gt; flags;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span&gt; channel_count;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; in-place processing: allow the host to use the same buffer for
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; input and output if supported set the pair port id.
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; if not supported set to CLAP_INVALID_ID
&lt;&#x2F;span&gt;&lt;span&gt;   clap_id in_place_pair;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; &amp;lt;----------------------------------- 2
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;clap_audio_port_info_t&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;Each audio port can choose whether it wants to use 32 bit or 64 bit buffers. This means you can have plugins that requests 32 bit buffers for some ports and 64 bit buffers for others. To make matters more complicated, this only hints to the host that the plugin &lt;em&gt;wants&lt;&#x2F;em&gt; 64 bit buffers, but the host may still give it 32 bit buffers regardless. Luckily on the flipside the host may not send 64 bit buffers to plugins that haven&#x27;t requested it.&lt;&#x2F;li&gt;
&lt;li&gt;Any pair of input and output ports may be bounded together into their own &quot;in_place_pair&quot;. This tells the host that it may send a single buffer for both ports in that pair to save CPU resources, akin to &lt;code&gt;process_replacing()&lt;&#x2F;code&gt; in VST.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;dealing-with-mixed-32-bit-and-64-bit-buffers&quot;&gt;Dealing with mixed 32 bit and 64 bit buffers&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;To start with the first problem, we can use an enum for &lt;code&gt;clap_audio_buffer_t&lt;&#x2F;code&gt; that can either be 32 bit or 64 bit buffers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;AudioBuffer &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;F32&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;F64&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fine enough for plugins that requested 64 bit buffers, but for plugins that haven&#x27;t made that request, we are requiring them to essentially add a runtime check for something that is guaranteed to be the 32 bit variant. This runtime check may not be a big deal for most plugins, but I would like to have the ability to avoid it if possible. The solution I came up with is to use the &lt;code&gt;unwrap_unchecked&lt;&#x2F;code&gt; option built into Rust&#x27;s &lt;code&gt;Option&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;AudioBuffer &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Ensure that this struct can only be initialized with
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; `new_f32()` or `new_f64()`.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_private&lt;&#x2F;span&gt;&lt;span&gt;: (),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;AudioBuffer &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; These initializers ensure that either `float` or `double` will
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; always be `Some`.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;new_f32&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        AudioBuffer { float: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(float), double: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, _private: () }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;new_f64&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        AudioBuffer { float: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, double: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(double), _private: () }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; --------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Now the plugin that requested 64 bit buffers can retrieve them like
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; this:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buffer.double.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;as_mut&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 64 bit dsp stuff
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; The user can safely use `unwrap_unchecked()` here because if
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; `double` is `None` then `float` must be `Some`.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Or they can still use the `if let Some()` trick if they don&amp;#39;t
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; want any unsafe in their code, at the cost of an extra runtime
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; check.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ buffer.float.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;as_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap_unchecked&lt;&#x2F;span&gt;&lt;span&gt;() };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 32 bit dsp stuff
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; --------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; And plugins that have not requested 64 bit buffers can safely
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; assume that the buffer is always 32 bit:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Or they can still use the `if let Some()` trick if they don&amp;#39;t
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; want any unsafe in their code, at the cost of a runtime check.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ buffer.float.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;as_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap_unchecked&lt;&#x2F;span&gt;&lt;span&gt;() };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;dealing-with-aliasing-pointers&quot;&gt;Dealing with aliasing pointers&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;In C and C++, the host sends a single buffer for an &quot;in_place_pair&quot; of ports by storing the same pointer in both slots. For example, the host can send a single stereo buffer to a plugin with a single input&#x2F;output like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; C
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; left_buffer[MAX_FRAMES];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; right_buffer[MAX_FRAMES];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; stereo_buffer[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;left_buffer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;right_buffer};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;clap_audio_buffer_t input_buffer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;stereo_buffer,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... initialize other stuff
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;clap_audio_buffer_t output_buffer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;stereo_buffer,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... initialize other stuff
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;clap_process_t proc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;audio_inputs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;input_buffer,
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;audio_outputs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;output_buffer,
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;audio_inputs_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;audio_outputs_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... initialize other stuff
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This creates an aliased pointer to mutable data (the same pointer appears twice within the same struct). C and C++ are all hunky-dory with this, but Rust is not.&lt;&#x2F;p&gt;
&lt;p&gt;So how do we fix it in Rust?&lt;&#x2F;p&gt;
&lt;p&gt;After a lot of head-scratching and rewrites, I eventually came to this solution. Wrap all the input ports in an &lt;code&gt;Option&lt;&#x2F;code&gt;. If an input port is &lt;code&gt;None&lt;&#x2F;code&gt;, then it means that the host has given a single buffer for that input&#x2F;output port pair. If that is the case then the shared buffer will live in the corresponding output port.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ProcAudioBuffers &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;AudioBuffer&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;outputs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;AudioBuffer&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; --------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Now a plugin that has requested in-place can check if a
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; particular pair is in-place or not:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; As a side note, the user may also safely use `get_unchecked`
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; for indexing into the array of buffers if the plugin has
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; defined an input&#x2F;output port at that index.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; proc_buffers.outputs[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(input) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;proc_buffers.inputs[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Non-in-place DSP stuff
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; In-place DSP stuff
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; --------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; If a plugin has not put an input port in an &amp;quot;in_place_pair&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; then the user may safely use `unwrap_unchecked()` to get that
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; input port buffer without any checks at runtime.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sidechain_in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    proc_buffers.inputs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;get_unchecked&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap_unchecked&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This may seem fairly simple in hindsight, but I only came to this solution once I accepted there is no clean way to get around making the user use &lt;code&gt;unsafe&lt;&#x2F;code&gt; to achieve the least possible amount of runtime checks. I&#x27;ve tried things like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RustyDAW&#x2F;rusty-daw-engine&#x2F;blob&#x2F;ddf260123ec69b41ef92e184f94ebfb8d42ce231&#x2F;src&#x2F;process_info&#x2F;proc_audio_buffers.rs&quot;&gt;complex enums&lt;&#x2F;a&gt; that tried to boil everything down into a single runtime check (switching on the enum), but it got ugly fast.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;actual-implementation&quot;&gt;Actual implementation&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;One more note before I wrap this up. You might have noticed that the user has mutable access to the input buffers in &lt;code&gt;ProcAudioBuffers&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First off, I should note that the buffers in my DAW engine aren&#x27;t just &lt;code&gt;Vec&lt;&#x2F;code&gt;&#x27;s, they actually look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SharedAudioBuffer&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    T: Sized + Copy + Clone + Send + Default + &amp;#39;static
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span&gt;: Shared&amp;lt;(UnsafeCell&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;&amp;gt;, UniqueBufferID)&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SharedAudioBuffer&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    T: Sized + Copy + Clone + Send + Default + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;static
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;proc_info&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ProcInfo) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[T] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            std::slice::from_raw_parts(
&lt;&#x2F;span&gt;&lt;span&gt;                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buffer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;as_ptr&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                proc_info.frames
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;proc_info&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ProcInfo) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;[T] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            std::slice::from_raw_parts_mut(
&lt;&#x2F;span&gt;&lt;span&gt;                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buffer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;as_mut_slice&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;as_mut_ptr&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                proc_info.frames,
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yes, that is an &lt;code&gt;UnsafeCell&lt;&#x2F;code&gt;. I won&#x27;t get into detail an what this is all doing for now as I&#x27;ll probably make another post about it in the near future, but for now you can read the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RustyDAW&#x2F;rusty-daw-engine&#x2F;blob&#x2F;main&#x2F;src&#x2F;audio_buffer.rs#L10&quot;&gt;safety note&lt;&#x2F;a&gt; in the repo.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, you can see that instead of passing around owned &lt;code&gt;Vec&lt;&#x2F;code&gt;&#x27;s as our buffers, we are passing them around via a smart pointer (in this case &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;glowcoil&#x2F;basedrop&quot;&gt;basedrop&lt;&#x2F;a&gt;&#x27;s &lt;code&gt;Shared&lt;&#x2F;code&gt; smart pointer).&lt;&#x2F;p&gt;
&lt;p&gt;I then make them accessible to the user via this safe wrapper (which is not in the repo yet btw):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;AudioBufferFormat&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    T: Sized + Copy + Clone + Send + Default + &amp;#39;static
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Make this private so the user doesn&amp;#39;t have direct access to this
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; &amp;quot;unsafe&amp;quot; buffer.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rc_buffers&lt;&#x2F;span&gt;&lt;span&gt;: SmallVec&amp;lt;[SharedAudioBuffer&amp;lt;T&amp;gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;AudioBufferFormat&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    T: Sized + Copy + Clone + Send + Default + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;static
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F; Immutably borrow a channel.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F; This will return `None` if the channel with the given index does
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F; not exist.
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;channel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;channel&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;proc_info&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ProcInfo)
&lt;&#x2F;span&gt;&lt;span&gt;        -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[T]&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.rc_buffers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(channel).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;| b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span&gt;() })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F; Mutably borrow a channel.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F; This will return `None` if the channel with the given index does
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&#x2F; not exist.
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;channel_mut&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;channel&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;proc_info&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;ProcInfo)
&lt;&#x2F;span&gt;&lt;span&gt;        -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;[T]&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Safety: Mutability rules are upheld because this method borrows
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; `self` as mutable, preventing the user from borrowing the same
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; buffer twice.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.rc_buffers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(channel).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;| b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span&gt;() })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... more methods for borrowing more than one channel at once
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;AudioBuffer &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;AudioBufferFormat&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;AudioBufferFormat&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Make these private so the user can&amp;#39;t modify them.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;latency&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; latency from&#x2F;to the audio interface
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;silent_mask&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; mask &amp;amp; (1 &amp;lt;&amp;lt; N) to test if channel N is silent
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;channel_count&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;AudioBuffer &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;latency&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.latency
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;silent_mask&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.silent_mask
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;channel_count&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.channel_count
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; And finally, this is what gets passed into the plugin&amp;#39;s `process()`
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; method:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ProcAudioBuffers&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;AudioBuffer&amp;gt;&amp;gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;outputs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a mut&lt;&#x2F;span&gt;&lt;span&gt; [AudioBuffer],
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;to-be-continued&quot;&gt;To be continued&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This post showed how you can pass audio buffers from a Rust host to an internal Rust plugin. Next up I&#x27;ll show how this audio buffer API can be used to make safe &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;free-audio&#x2F;clap&quot;&gt;CLAP&lt;&#x2F;a&gt; plugins (and possibly other plugin formats) in Rust, making it so you can use the same code for both an internal plugin in my DAW engine as well as an external CLAP plugin.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;addendum&quot;&gt;Addendum&lt;&#x2F;h1&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I&#x27;ve learned that writing blogs really helps with working through a problem. I&#x27;m excited to do this more often!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Hello World Post</title>
        <published>2022-03-01T00:00:00+00:00</published>
        <updated>2022-03-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://billydm.github.io/blog/hello-world/"/>
        <id>https://billydm.github.io/blog/hello-world/</id>
        
        <content type="html" xml:base="https://billydm.github.io/blog/hello-world/">&lt;p&gt;Yay, I finally got Zola working!&lt;&#x2F;p&gt;
&lt;p&gt;It took me forever to figure out how to deploy it on GitHub pages.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;del&gt;I&#x27;ve also spent most of the day tweaking the CSS.&lt;&#x2F;del&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Update - I figured out how to get the &lt;code&gt;zola-deploy-action&lt;&#x2F;code&gt; GitHub action to work.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;At first I thought the default &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shalzz&#x2F;zola-deploy-action&quot;&gt;zola-deploy-action&lt;&#x2F;a&gt; GitHub action for deploying to GitHub Pages required creating one of those security nightmares known as GitHub Personal Access Tokens, as per the &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;deployment&#x2F;github-pages&#x2F;&quot;&gt;official docs&lt;&#x2F;a&gt; at the time of this writing. There was no way I was doing that. So at first I tried just building it on my computer with &lt;code&gt;zola build -o docs&lt;&#x2F;code&gt;. This put the generated html files into the &lt;code&gt;&#x2F;docs&lt;&#x2F;code&gt; folder, which I then just commit directly to the main branch.&lt;&#x2F;p&gt;
&lt;p&gt;But then after posting about my initial blog post on Discord, someone pointed out that you don&#x27;t actually need to create the GitHub Personal Access Token to use the deploy script, and that the official docs were outdated. Fun.&lt;&#x2F;p&gt;
&lt;p&gt;Even when I did that, I found the default script example in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shalzz&#x2F;zola-deploy-action&quot;&gt;zola-deploy-action&lt;&#x2F;a&gt; repo has it try to build into the &lt;code&gt;docs&lt;&#x2F;code&gt; directory, which then spits out an error message saying &lt;code&gt;&#x2F;entrypoint.sh: line 63: cd: docs: No such file or directory&lt;&#x2F;code&gt;. Changing this to use the default root directory fixed this. Guess I need to file another issue with the documentation.&lt;&#x2F;p&gt;
&lt;p&gt;Another headache was figuring out that Zola treats themes in the &lt;code&gt;themes&lt;&#x2F;code&gt; folder as git submodules, so you can&#x27;t actually customize the CSS there. The solution was to just omit putting the theme in the theme folder and instead including the contents directly into my repo. I don&#x27;t want to rely on a submodule dependency for something as simple as a blog website.&lt;&#x2F;p&gt;
&lt;p&gt;Also, I was told I should add &lt;a href=&quot;https:&#x2F;&#x2F;www.petefreitag.com&#x2F;item&#x2F;384.cfm&quot;&gt;RSS Autodiscovery&lt;&#x2F;a&gt; to my site so I did that.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, Zola has some documentation issues that need addressing, but in the end I really like how my modified theme turned out. Being able to write blogposts in markdown and seeing the result live with &lt;code&gt;zola serve&lt;&#x2F;code&gt; is really cool.&lt;&#x2F;p&gt;
&lt;p&gt;A meme to celebrate: ðŸŽ‰&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;dank_meme.jpg&quot; alt=&quot;dank meme&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
